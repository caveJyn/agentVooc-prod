import { useQuery } from "@tanstack/react-query";
import { Cog, Plus, ChevronDown, ChevronUp } from "lucide-react";
import PageTitle from "@/components/page-title";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { apiClient } from "@/lib/api";
import { NavLink } from "react-router-dom";
import type { UUID } from "@elizaos/core";
import { formatAgentName } from "@/lib/utils";
import { useEffect, useState } from "react";
import { Textarea } from "@/components/ui/textarea";
import { v4 as uuidv4 } from "uuid";
import { Loader2 } from "lucide-react";
import StripePayment from "@/components/stripe-payment";
import { doesSessionExist, getAccessToken } from "supertokens-web-js/recipe/session";

interface Item {
  id: string;
  name: string;
  description: string;
  price: number;
  source?: string;
}

interface GeneratedCharacter {
  name: string;
  username?: string;
  system: string;
  bio: string[];
  lore: string[];
  messageExamples: any[];
  postExamples: string[];
  topics: string[];
  adjectives: string[];
  modelProvider?: "OPENAI" | "OLLAMA" | "CUSTOM";
  plugins: string[];
  settings: {
    secrets: { [key: string]: string };
    voice: { model: string };
    ragKnowledge: boolean;
  };
  style: {
    all: string[];
    chat: string[];
    post: string[];
  };
  knowledge: any[];
}

export default function Home() {
  const [showForm, setShowForm] = useState(false);
  const [showAdvanced, setShowAdvanced] = useState(false);
  const [creationMode, setCreationMode] = useState<"manual" | "auto">("manual");
  const [prompt, setPrompt] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);
  const [characterData, setCharacterData] = useState({
    id: uuidv4() as UUID,
    name: "",
    username: "",
    system: "",
    bio: [] as string[],
    lore: [] as string[],
    messageExamples: [] as any[],
    postExamples: [] as string[],
    topics: [] as string[],
    adjectives: [] as string[],
    modelProvider: "OPENAI" as "OPENAI" | "OLLAMA" | "CUSTOM" | undefined,
    plugins: [] as string[],
    settings: {
      secrets: {} as { [key: string]: string },
      voice: { model: "" },
      ragKnowledge: false,
    },
    style: {
      all: [] as string[],
      chat: [] as string[],
      post: [] as string[],
    },
    knowledge: [] as any[],
  });
  const [error, setError] = useState<string | null>(null);
  const [bioInput, setBioInput] = useState("");
  const [loreInput, setLoreInput] = useState("");
  const [topicsInput, setTopicsInput] = useState("");
  const [adjectivesInput, setAdjectivesInput] = useState("");
  const [postExamplesInput, setPostExamplesInput] = useState("");
  const [user, setUser] = useState<{ userId: string; userType: string } | null>(null);
  const [selectedItems, setSelectedItems] = useState<Item[]>([]);

  useEffect(() => {
    async function fetchUser() {
      console.log("[HOME] Checking if session exists");
      if (await doesSessionExist()) {
        try {
          // Fetch the session's user ID
          const accessToken = await getAccessToken();
          if (!accessToken) {
            throw new Error("No access token found in session");
          }
          const sessionResponse = await fetch(`${import.meta.env.VITE_SERVER_BASE_URL}/api/user`, {
            method: "GET",
            credentials: "include",
            headers: {
              Authorization: `Bearer ${accessToken}`,
            },
          });
          if (!sessionResponse.ok) {
            throw new Error(`Failed to fetch session user: ${sessionResponse.statusText}`);
          }
          const sessionData = await sessionResponse.json();
          const sessionUserId = sessionData.userId;

          // Check if user exists in Sanity
          const existingUser = await apiClient.createUser({
            name: "Current User",
            email: sessionData.email || "current@example.com",
            interest: "elizaOS",
            referralSource: "home",
            userId: sessionUserId,
            userType: sessionData.userType || "email",
          });

          console.log("[HOME] User fetched/created:", existingUser);
          setUser({ userId: existingUser.userId, userType: existingUser.userType });
        } catch (err: any) {
          console.error("[HOME] Failed to fetch user data:", err.message);
          setError("Failed to load user data. Please try again.");
        }
      } else {
        console.log("[HOME] No session exists, user not fetched");
      }
    }
    fetchUser();
  }, []);

  const agentsQuery = useQuery({
    queryKey: ["agents"],
    queryFn: async () => {
      try {
        const data = await apiClient.getAgents();
        console.log("Fetched agents:", data.agents);
        return data;
      } catch (err: any) {
        const errorMessage = err.message.includes("Unauthorized")
          ? "Please log in to view your characters."
          : err.message.includes("User not found")
          ? "Your account is not registered. Please sign up again."
          : "Failed to fetch your characters: " + (err.message || "Unknown error");
        setError(errorMessage);
        console.error("Error fetching agents:", err.message, "Status:", err.status);
        if (err.message.includes("Unauthorized") && window.location.pathname !== "/auth") {
          window.location.href = "/auth";
        }
        throw err;
      }
    },
    refetchInterval: 5_000,
  });

  const itemsQuery = useQuery({
    queryKey: ["items"],
    queryFn: async () => {
      try {
        const data = await apiClient.getItems();
        console.log("Fetched items:", data.items);
        return data;
      } catch (err: any) {
        console.error("Error fetching items:", err.message);
        setError("Failed to fetch items: " + (err.message || "Unknown error"));
        throw err;
      }
    },
  });

  const agents = agentsQuery?.data?.agents || [];
  const items = itemsQuery?.data?.items || [];

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setCharacterData((prev) => ({ ...prev, [name]: value }));
  };

  const handleArrayInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,
    field: string
  ) => {
    const value = e.target.value;
    if (field === "bio") setBioInput(value);
    if (field === "lore") setLoreInput(value);
    if (field === "topics") setTopicsInput(value);
    if (field === "adjectives") setAdjectivesInput(value);
    if (field === "postExamples") setPostExamplesInput(value);
  };

  const handleAdvancedInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>,
    field: string,
    subfield?: string
  ) => {
    const value = e.target.value;
    setCharacterData((prev) => {
      if (field === "settings" && subfield) {
        return {
          ...prev,
          settings: {
            ...prev.settings,
            [subfield]: subfield === "ragKnowledge" ? value === "true" : value,
          },
        };
      }
      if (field === "style" && subfield) {
        return {
          ...prev,
          style: {
            ...prev.style,
            [subfield]: value.split(",").map((s) => s.trim()),
          },
        };
      }
      if (field === "plugins") {
        return {
          ...prev,
          plugins: value.split(",").map((s) => s.trim()),
        };
      }
      return {
        ...prev,
        [field]: value,
      };
    });
  };

  const generateCharacterFromPrompt = async () => {
    if (!prompt) {
      setError("Please enter a prompt to generate a character.");
      return;
    }
    setIsGenerating(true);
    setError(null);
    try {
      const systemPrompt = `
        You are an AI assistant tasked with generating a character for a role-playing platform based on a user-provided prompt. The character must conform to the following JSON schema, filling in all fields thoughtfully based on the prompt. Ensure the output is a valid JSON object with no extraneous text or markdown (e.g., no \`\`\`json markers). If a field is optional and not relevant, provide an empty value (e.g., [], {}, ""). Use the prompt to infer details, and be creative but consistent. For fields like bio, lore, topics, adjectives, postExamples, plugins, and style, use single words or snake_case (e.g., "nautical_navigation") to avoid spaces.

        Schema:
        {
          "name": "string (required, unique, non-empty)",
          "username": "string (optional, unique if provided)",
          "system": "string (system prompt for the character's behavior)",
          "bio": ["string", ...] (array of single-word or snake_case bio statements)",
          "lore": ["string", ...] (array of single-word or snake_case lore snippets)",
          "messageExamples": [any, ...] (array of example messages, can be empty)",
          "postExamples": ["string", ...] (array of single-word or snake_case example posts)",
          "topics": ["string", ...] (array of single-word or snake_case topics)",
          "adjectives": ["string", ...] (array of single-word or snake_case adjectives)",
          "modelProvider": "OPENAI | OLLAMA | CUSTOM" (optional, default "OPENAI"),
          "plugins": ["string", ...] (array of single-word or snake_case plugins, e.g., "telegram", "solana")",
          "settings": {
            "secrets": { "key": "value", ... } (optional key-value pairs, can be empty)",
            "voice": { "model": "string" } (voice model, can be empty)",
            "ragKnowledge": boolean (whether RAG is enabled)
          },
          "style": {
            "all": ["string", ...] (single-word or snake_case styles for all contexts)",
            "chat": ["string", ...] (single-word or snake_case styles for chat)",
            "post": ["string", ...] (single-word or snake_case styles for posts)
          },
          "knowledge": [any, ...] (array of knowledge items, can be empty)
        }

        User Prompt: "${prompt}"

        Return only the JSON object, e.g., {"name":"agentVooc",...}.
      `;

      const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${import.meta.env.OPENAI_API_KEY || ""}`,
        },
        body: JSON.stringify({
          model: "gpt-4",
          messages: [
            { role: "system", content: systemPrompt },
            { role: "user", content: `Generate a character based on the following prompt: ${prompt}` },
          ],
          max_tokens: 1000,
          temperature: 0.7,
        }),
      });

      if (!response.ok) {
        throw new Error(`Failed to generate character: ${response.statusText}`);
      }

      const data = await response.json();
      const generated: GeneratedCharacter = JSON.parse(data.choices[0].message.content);

      setCharacterData((prev) => ({
        ...prev,
        id: uuidv4() as UUID,
        name: generated.name,
        username: generated.username || "",
        system: generated.system,
        bio: generated.bio,
        lore: generated.lore,
        messageExamples: generated.messageExamples,
        postExamples: generated.postExamples,
        topics: generated.topics,
        adjectives: generated.adjectives,
        modelProvider: generated.modelProvider || "OPENAI",
        plugins: generated.plugins,
        settings: generated.settings,
        style: generated.style,
        knowledge: generated.knowledge,
      }));

      setBioInput(generated.bio.join(", "));
      setLoreInput(generated.lore.join(", "));
      setTopicsInput(generated.topics.join(", "));
      setAdjectivesInput(generated.adjectives.join(", "));
      setPostExamplesInput(generated.postExamples.join(", "));
    } catch (err: any) {
      setError(err.message || "Failed to generate character from prompt.");
      console.error("Error generating character:", err.message);
    } finally {
      setIsGenerating(false);
    }
  };

  const sanitizeAttributeName = (str: string): string => {
    return str
      .replace(/[^a-zA-Z0-9_-]/g, "_")
      .replace(/^[^a-zA-Z_$]/, "_");
  };

  const handleCreateCharacter = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      if (!user) {
        throw new Error("User not authenticated. Please log in.");
      }

      const sanitizedCharacterData = {
        ...characterData,
        bio: bioInput ? bioInput.split(",").map((s) => sanitizeAttributeName(s.trim())) : [],
        lore: loreInput ? loreInput.split(",").map((s) => sanitizeAttributeName(s.trim())) : [],
        topics: topicsInput ? topicsInput.split(",").map((s) => sanitizeAttributeName(s.trim())) : [],
        adjectives: adjectivesInput ? adjectivesInput.split(",").map((s) => sanitizeAttributeName(s.trim())) : [],
        postExamples: postExamplesInput ? postExamplesInput.split(",").map((s) => sanitizeAttributeName(s.trim())) : [],
        username: characterData.username || undefined,
        modelProvider: characterData.modelProvider || "OPENAI",
        plugins: characterData.plugins.map(sanitizeAttributeName) || [],
        style: {
          all: characterData.style.all.map(sanitizeAttributeName),
          chat: characterData.style.chat.map(sanitizeAttributeName),
          post: characterData.style.post.map(sanitizeAttributeName),
        },
        knowledge: characterData.knowledge || [],
        messageExamples: characterData.messageExamples || [],
        enabled: true,
      };

      console.log("[HOME] Creating character with data:", sanitizedCharacterData);

      const response = await apiClient.createCharacter(sanitizedCharacterData);
      console.log("[HOME] Character creation response:", response);

      // Verify the created character has a createdBy field
      const createdCharacter = await fetch(`${import.meta.env.VITE_SERVER_BASE_URL}/api/characters/${sanitizedCharacterData.id}`, {
        method: "GET",
        credentials: "include",
        headers: {
          Authorization: `Bearer ${await getAccessToken()}`,
        },
      });
      const characterDataResponse = await createdCharacter.json();
      console.log("[HOME] Fetched created character:", characterDataResponse);

      if (!characterDataResponse.character.createdBy) {
        throw new Error("Character created but missing createdBy field");
      }

      // Start the agent
      try {
        await fetch(`${import.meta.env.VITE_SERVER_BASE_URL}/api/agent/start`, {
          method: "POST",
          credentials: "include",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${await getAccessToken()}`,
          },
          body: JSON.stringify({
            characterJson: sanitizedCharacterData,
          }),
        });
        console.log("[HOME] Agent started for character:", sanitizedCharacterData.id);
      } catch (err: any) {
        console.error("[HOME] Failed to start agent:", err.message);
      }

      setShowForm(false);
      setCreationMode("manual");
      setPrompt("");
      setCharacterData({
        id: uuidv4() as UUID,
        name: "",
        username: "",
        system: "",
        bio: [],
        lore: [],
        messageExamples: [],
        postExamples: [],
        topics: [],
        adjectives: [],
        modelProvider: "OPENAI" as "OPENAI" | "OLLAMA" | "CUSTOM" | undefined,
        plugins: [],
        settings: {
          secrets: {},
          voice: { model: "" },
          ragKnowledge: false,
        },
        style: {
          all: [],
          chat: [],
          post: [],
        },
        knowledge: [],
      });
      setBioInput("");
      setLoreInput("");
      setTopicsInput("");
      setAdjectivesInput("");
      setPostExamplesInput("");
      agentsQuery.refetch();
      setError(null);
    } catch (err: any) {
      setError(err.message || "Failed to create character");
      console.error("Error creating character:", err.message);
    }
  };

  const toggleForm = () => {
    setShowForm(!showForm);
    setError(null);
    setCreationMode("manual");
    setPrompt("");
  };

  const handleItemSelect = (item: Item) => {
    setSelectedItems((prev) =>
      prev.some((i) => i.id === item.id)
        ? prev.filter((i) => i.id !== item.id)
        : [...prev, item]
    );
  };

  try {
    return (
      <div className="flex flex-col gap-4 h-full p-4">
        <div className="flex items-center justify-between">
          <PageTitle title="Agents" />
          <Button variant="default" size="sm" onClick={toggleForm}>
            <Plus className="mr-2 h-4 w-4" />
            {showForm ? "Cancel" : "Create Character"}
          </Button>
        </div>

        {error && (
          <div className="bg-red-500 text-white p-2 rounded">{error}</div>
        )}
        {agentsQuery.isLoading && (
          <div className="text-gray-500 flex items-center">
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
            Loading your characters...
          </div>
        )}
        {showForm && (
          <div className="border rounded p-ظ4 bg-white">
            <h3 className="text-lg font-semibold mb-4">Create New Character</h3>
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Creation Mode
              </label>
              <div className="flex gap-2">
                <Button
                  variant={creationMode === "manual" ? "default" : "outline"}
                  onClick={() => setCreationMode("manual")}
                >
                  Manual
                </Button>
                <Button
                  variant={creationMode === "auto" ? "default" : "outline"}
                  onClick={() => setCreationMode("auto")}
                >
                  Auto-Create with Prompt
                </Button>
              </div>
            </div>
            {creationMode === "auto" && (
              <div className="mb-4">
                <label htmlFor="prompt" className="block text-sm font-medium text-gray-700">
                  Character Prompt
                </label>
                <Textarea
                  id="prompt"
                  value={prompt}
                  onChange={(e) => setPrompt(e.target.value)}
                  placeholder="Enter a prompt to generate a character (e.g., 'Create a witty Web3 developer named agentVooc who specializes in Ethereum smart contracts')"
                  className="text-black mt-1 block w-full border border-gray-300 rounded-md p-2"
                />
                <Button
                  onClick={generateCharacterFromPrompt}
                  disabled={isGenerating}
                  className="mt-2"
                >
                  {isGenerating ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Generating...
                    </>
                  ) : (
                    "Generate Character"
                  )}
                </Button>
              </div>
            )}
            {(creationMode === "manual" || (creationMode === "auto" && characterData.name)) && (
              <form onSubmit={handleCreateCharacter}>
                <div className="mb-4">
                  <label htmlFor="name" className="block text-sm font-medium text-gray-700">
                    Character Name (Required)
                  </label>
                  <input
                    id="name"
                    name="name"
                    type="text"
                    value={characterData.name}
                    onChange={handleInputChange}
                    placeholder="Enter character name (e.g., agentVooc)"
                    required
                    className="text-black mt-1 block w-full border border-gray-300 rounded-md p-2"
                  />
                </div>
                <div className="mb-4">
                  <label htmlFor="username" className="block text-sm font-medium text-gray-700">
                    Username
                  </label>
                  <input
                    id="username"
                    name="username"
                    type="text"
                    value={characterData.username}
                    onChange={handleInputChange}
                    placeholder="Enter username (e.g., eliza)"
                    className="text-black mt-1 block w-full border border-gray-300 rounded-md p-2"
                  />
                </div>
                <div className="mb-4">
                  <label htmlFor="system" className="block text-sm font-medium text-gray-700">
                    System Prompt
                  </label>
                  <Textarea
                    id="system"
                    name="system"
                    value={characterData.system}
                    onChange={handleInputChange}
                    placeholder="Enter system prompt (e.g., Roleplay as a Web3 developer)"
                    className="text-black mt-1 block w-full border border-gray-300 rounded-md p-2"
                  />
                </div>
                <div className="mb-4">
                  <label htmlFor="bio" className="block text-sm font-medium text-gray-700">
                    Bio (comma-separated)
                  </label>
                  <input
                    id="bio"
                    name="bio"
                    type="text"
                    value={bioInput}
                    onChange={(e) => handleArrayInputChange(e, "bio")}
                    placeholder="Enter bio statements (e.g., Web3 developer, Security-minded)"
                    className="text-black mt-1 block w-full border border-gray-300 rounded-md p-2"
                  />
                </div>
                <div className="mb-4">
                  <label htmlFor="lore" className="block text-sm font-medium text-gray-700">
                    Lore (comma-separated)
                  </label>
                  <input
                    id="lore"
                    name="lore"
                    type="text"
                    value={loreInput}
                    onChange={(e) => handleArrayInputChange(e, "lore")}
                    placeholder="Enter lore snippets (e.g., Started in Web2, Contributes to Ethereum)"
                    className="text-black mt-1 block w-full border border-gray-300 rounded-md p-2"
                  />
                </div>
                <div className="mb-4">
                  <label htmlFor="topics" className="block text-sm font-medium text-gray-700">
                    Topics (comma-separated)
                  </label>
                  <input
                    id="topics"
                    name="topics"
                    type="text"
                    value={topicsInput}
                    onChange={(e) => handleArrayInputChange(e, "topics")}
                    placeholder="Enter topics (e.g., Web3, Blockchain)"
                    className="text-black mt-1 block w-full border border-gray-300 rounded-md p-2"
                  />
                </div>
                <div className="mb-4">
                  <label htmlFor="adjectives" className="block text-sm font-medium text-gray-700">
                    Adjectives (comma-separated)
                  </label>
                  <input
                    id="adjectives"
                    name="adjectives"
                    type="text"
                    value={adjectivesInput}
                    onChange={(e) => handleArrayInputChange(e, "adjectives")}
                    placeholder="Enter adjectives (e.g., witty, technical)"
                    className="text-black mt-1 block w-full border border-gray-300 rounded-md p-2"
                  />
                </div>
                <div className="mb-4">
                  <label htmlFor="postExamples" className="block text-sm font-medium text-gray-700">
                    Post Examples (comma-separated)
                  </label>
                  <input
                    id="postExamples"
                    name="postExamples"
                    type="text"
                    value={postExamplesInput}
                    onChange={(e) => handleArrayInputChange(e, "postExamples")}
                    placeholder="Enter post examples (e.g., Debugged for 3 hours, Gas fees are forever)"
                    className="text-black mt-1 block w-full border border-gray-300 rounded-md p-2"
                  />
                </div>
                <div className="mb-4">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => setShowAdvanced(!showAdvanced)}
                    className="flex items-center"
                  >
                    Advanced Settings {showAdvanced ? <ChevronUp className="ml-2" /> : <ChevronDown className="ml-2" />}
                  </Button>
                </div>
                {showAdvanced && (
                  <>
                    <div className="mb-4">
                      <label htmlFor="modelProvider" className="block text-sm font-medium text-gray-700">
                        Model Provider
                      </label>
                      <select
                        id="modelProvider"
                        name="modelProvider"
                        value={characterData.modelProvider}
                        onChange={(e) => handleAdvancedInputChange(e, "modelProvider")}
                        className="text-black mt-1 block w-full border border-gray-300 rounded-md p-2"
                      >
                        <option value="OPENAI">OPENAI</option>
                        <option value="OLLAMA">OLLAMA</option>
                        <option value="CUSTOM">CUSTOM</option>
                      </select>
                    </div>
                    <div className="mb-4">
                      <label htmlFor="plugins" className="block text-sm font-medium text-gray-700">
                        Plugins (comma-separated)
                      </label>
                      <input
                        id="plugins"
                        name="plugins"
                        type="text"
                        value={characterData.plugins.join(",")}
                        onChange={(e) => handleAdvancedInputChange(e, "plugins")}
                        placeholder="Enter plugins (e.g., telegram, solana)"
                        className="text-black mt-1 block w-full border border-gray-300 rounded-md p-2"
                      />
                    </div>
                    <div className="mb-4">
                      <label htmlFor="voiceModel" className="block text-sm font-medium text-gray-700">
                        Voice Model
                      </label>
                      <input
                        id="voiceModel"
                        name="voiceModel"
                        type="text"
                        value={characterData.settings.voice.model}
                        onChange={(e) => {
                          handleAdvancedInputChange(e, "settings", "voiceModel");
                          setCharacterData((prev) => ({
                            ...prev,
                            settings: {
                              ...prev.settings,
                              voice: { model: e.target.value },
                            },
                          }));
                        }}
                        placeholder="Enter voice model (e.g., en_US-hfc_female-medium)"
                        className="text-black mt-1 block w-full border border-gray-300 rounded-md p-2"
                      />
                    </div>
                    <div className="mb-4">
                      <label htmlFor="ragKnowledge" className="block text-sm font-medium text-gray-700">
                        Enable RAG Knowledge
                      </label>
                      <select
                        id="ragKnowledge"
                        name="ragKnowledge"
                        value={characterData.settings.ragKnowledge.toString()}
                        onChange={(e) => handleAdvancedInputChange(e, "settings", "ragKnowledge")}
                        className="text-black mt-1 block w-full border border-gray-300 rounded-md p-2"
                      >
                        <option value="true">Yes</option>
                        <option value="false">No</option>
                      </select>
                    </div>
                    <div className="mb-4">
                      <label htmlFor="styleAll" className="block text-sm font-medium text-gray-700">
                        Style: All Contexts (comma-separated)
                      </label>
                      <input
                        id="styleAll"
                        name="styleAll"
                        type="text"
                        value={characterData.style.all.join(",")}
                        onChange={(e) => handleAdvancedInputChange(e, "style", "all")}
                        placeholder="Enter styles (e.g., concise, witty)"
                        className="text-black mt-1 block w-full border border-gray-300 rounded-md p-2"
                      />
                    </div>
                    <div className="mb-4">
                      <label htmlFor="styleChat" className="block text-sm font-medium text-gray-700">
                        Style: Chat (comma-separated)
                      </label>
                      <input
                        id="styleChat"
                        name="styleChat"
                        type="text"
                        value={characterData.style.chat.join(",")}
                        onChange={(e) => handleAdvancedInputChange(e, "style", "chat")}
                        placeholder="Enter chat styles (e.g., playful, dynamic)"
                        className="text-black mt-1 block w-full border border-gray-300 rounded-md p-2"
                      />
                    </div>
                    <div className="mb-4">
                      <label htmlFor="stylePost" className="block text-sm font-medium text-gray-700">
                        Style: Post (comma-separated)
                      </label>
                      <input
                        id="stylePost"
                        name="stylePost"
                        type="text"
                        value={characterData.style.post.join(",")}
                        onChange={(e) => handleAdvancedInputChange(e, "style", "post")}
                        placeholder="Enter post styles (e.g., ironic, relevant)"
                        className="text-black mt-1 block w-full border border-gray-300 rounded-md p-2"
                      />
                    </div>
                  </>
                )}
                <div>
                  <button
                    type="submit"
                    className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
                  >
                    Create
                  </button>
                </div>
              </form>
            )}
          </div>
        )}

        {user && (
          <div className="mt-4">
            <h3 className="text-lg font-semibold mb-4">Select Items to Purchase</h3>
            {itemsQuery.isLoading && (
              <div className="text-gray-500 flex items-center">
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Loading items...
              </div>
            )}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
              {items.map((item: Item) => (
                <Card
                  key={item.id}
                  className={`cursor-pointer ${
                    selectedItems.some((i) => i.id === item.id)
                      ? "border-blue-500 border-2"
                      : ""
                  }`}
                  onClick={() => handleItemSelect(item)}
                >
                  <CardHeader>
                    <CardTitle>{item.name}</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p>{item.description}</p>
                    <p className="font-semibold">${(item.price / 100).toFixed(2)}</p>
                    {item.source && <p className="text-sm text-gray-500">Source: {item.source}</p>}
                  </CardContent>
                </Card>
              ))}
            </div>
            <StripePayment
              userId={user.userId}
              userType={user.userType}
              selectedItems={selectedItems}
            />
            {user.userType === "crypto" && (
              <p className="mt-4 text-gray-600">Crypto payments via Phantom Wallet are coming soon!</p>
            )}
          </div>
        )}

        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          {!agentsQuery.isLoading && !error && agents.length === 0 && (
            <div className="text-gray-500">
              You haven't created any characters yet. Click "Create Character" to get started!
            </div>
          )}
          {agents.map((agent: { id: UUID; name: string }) => (
            <Card key={agent.id}>
              <CardHeader>
                <CardTitle>{agent?.name}</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="rounded-md bg-muted aspect-square w-full grid place-items-center">
                  <div className="text-6xl font-bold uppercase">
                    {formatAgentName(agent?.name)}
                  </div>
                </div>
              </CardContent>
              <CardFooter>
                <div className="flex items-center gap-4 w-full">
                  <NavLink to={`/chat/${agent.id}`} className="w-full grow">
                    <Button variant="outline" className="w-full grow">
                      Chat
                    </Button>
                  </NavLink>
                  <NavLink to={`/settings/${agent.id}`} key={agent.id}>
                    <Button size="icon" variant="outline">
                      <Cog />
                    </Button>
                  </NavLink>
                </div>
              </CardFooter>
            </Card>
          ))}
        </div>
      </div>
    );
  } catch (renderError: any) {
    console.error("Render error in Home component:", renderError);
    return (
      <div className="p-4">
        <h1>Error rendering page</h1>
        <p>Check the console for details.</p>
      </div>
    );
  }
}