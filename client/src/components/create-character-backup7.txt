// client/src/components/create-character.tsx
import { useCallback, useEffect, useState,  } from "react";
import { v4 as uuidv4 } from "uuid";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { useNavigate,  } from "react-router-dom";
import { apiClient } from "@/lib/api";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { User, Heart, MessageCircle, FileText, Zap, Settings, Loader2 } from "lucide-react";
import { toast } from "@/hooks/use-toast";
import type { UUID } from "@elizaos/core";
import { useQuery } from "@tanstack/react-query";
import { Card } from "./ui/card";
import { CardHeader } from "./ui/cardheader";
import { CardTitle } from "./ui/cardtitle";
import { CardContent } from "./ui/cardcontent";


// Debounce utility
function debounce<T extends (...args: any[]) => void>(func: T, wait: number): (...args: Parameters<T>) => void {
  let timeout: NodeJS.Timeout | null = null;
  return (...args: Parameters<T>) => {
    if (timeout) clearTimeout(timeout);
    timeout = setTimeout(() => func(...args), wait);
  };
}
interface CreateCharacterProps {
  setError: React.Dispatch<React.SetStateAction<string | null>>;
}


export default function CreateCharacter({ setError }: CreateCharacterProps) {
  const navigate = useNavigate();
  const queryClient = useQueryClient();
  const [secrets, setSecrets] = useState<{ key: string; value: string }[]>([{ key: "", value: "" }]);
  const [secretsError, setSecretsError] = useState<string | null>(null);
  const [profileImage, setProfileImage] = useState<File | null>(null);
  const [imagePreview, setImagePreview] = useState<string | null>(null);
  const [telegramBotToken, setTelegramBotToken] = useState("");
  const [twitterUsername, setTwitterUsername] = useState("");
  const [twitterPassword, setTwitterPassword] = useState("");
  const [twitterEmail, setTwitterEmail] = useState("");
  const [messageExamplesError, setMessageExamplesError] = useState<string | null>(null);
  const [emailOutgoingUser, setEmailOutgoingUser] = useState("");
  const [emailOutgoingPass, setEmailOutgoingPass] = useState("");
  const [emailIncomingUser, setEmailIncomingUser] = useState("");
  const [emailIncomingPass, setEmailIncomingPass] = useState("");
  const [selectedPreset, setSelectedPreset] = useState<string | null>(null);
  // Predefined traits
 



 // Initialize characterData state with empty fields
  const [characterData, setCharacterData] = useState({
    id: uuidv4() as UUID,
    name: "",
    username: "",
    system: "",
    bio: [] as string[],
    lore: [] as string[],
    messageExamples: [] as any[],
    postExamples: [] as string[],
    topics: [] as string[],
    adjectives: [] as string[],
    modelProvider: "OPENAI" as "OPENAI" | "OLLAMA" | "CUSTOM" | undefined,
    plugins: [] as string[],
    settings: {
      secrets: { dynamic: [] as { key: string; value: string }[] },
      voice: { model: "" },
      ragKnowledge: false,
      email: {
        outgoing: {
          service: "gmail" as "smtp" | "gmail",
          host: "",
          port: 0,
          secure: false,
          user: "",
          pass: "",
        },
        incoming: {
          service: "imap" as "imap",
          host: "",
          port: 993,
          user: "",
          pass: "",
        },
      },
    },
    style: {
      all: [] as string[],
      chat: [] as string[],
      post: [] as string[],
    },
    knowledge: [] as any[],
  });


   const [bioInput, setBioInput] = useState("");
  const [loreInput, setLoreInput] = useState("");
  const [messageExamplesInput, setMessageExamplesInput] = useState("[]");
  const [postExamplesInput, setPostExamplesInput] = useState("");
  const [topicsInput, setTopicsInput] = useState("");
  const [adjectivesInput, setAdjectivesInput] = useState("");
  const [styleAllInput, setStyleAllInput] = useState("");
  const [styleChatInput, setStyleChatInput] = useState("");
  const [stylePostInput, setStylePostInput] = useState("");
  

    // Fetch character presets
  const presetsQuery = useQuery({
    queryKey: ["characterPresets"],
    queryFn: async () => {
      const response = await apiClient.getCharacterPresets();
      console.log("[CREATE_CHARACTER] characterPresets response:", response);
      return response.characterPresets;
    },
  });

 // Fetch user data from Sanity
  const userQuery = useQuery({
    queryKey: ["user"],
    queryFn: async () => {
      const response = await apiClient.getUser();
      console.log("[CREATE_CHARACTER] userQuery response:", response);
      return response.user;
    },
  });

 // Handle preset selection
  const handlePresetSelect = (preset: any | null) => {
    setSelectedPreset(preset?._id || null);
    if (!preset) {
      // Reset to "Create Your Own" with empty fields
      setCharacterData({
        id: uuidv4() as UUID,
        name: "",
        username: "",
        system: "",
        bio: [],
        lore: [],
        messageExamples: [],
        postExamples: [],
        topics: [],
        adjectives: [],
        modelProvider: "OPENAI",
        plugins: [],
        settings: {
          secrets: { dynamic: [] },
          voice: { model: "" },
          ragKnowledge: false,
          email: {
            outgoing: { service: "gmail", host: "", port: 0, secure: false, user: "", pass: "" },
            incoming: { service: "imap", host: "", port: 993, user: "", pass: "" },
          },
        },
        style: {
          all: [],
          chat: [],
          post: [],
        },
        knowledge: [],
      });
      setBioInput("");
      setLoreInput("");
      setMessageExamplesInput("[]");
      setPostExamplesInput("");
      setTopicsInput("");
      setAdjectivesInput("");
      setStyleAllInput("");
      setStyleChatInput("");
      setStylePostInput("");
      setSecrets([{ key: "", value: "" }]);
      setProfileImage(null);
      setImagePreview(null);
      setTelegramBotToken("");
      setTwitterUsername("");
      setTwitterPassword("");
      setTwitterEmail("");
      setEmailOutgoingUser("");
      setEmailOutgoingPass("");
      setEmailIncomingUser("");
      setEmailIncomingPass("");
    } else {
      // Load preset data
      setCharacterData({
        id: uuidv4() as UUID,
        name: preset.name || "",
        username: preset.username || "",
        system: preset.system || "",
        bio: preset.bio || [],
        lore: preset.lore || [],
        messageExamples: preset.messageExamples?.map((msg: any) => msg.conversation) || [],
        postExamples: preset.postExamples || [],
        topics: preset.topics || [],
        adjectives: preset.adjectives || [],
        modelProvider: preset.modelProvider || "OPENAI",
        plugins: preset.plugins || [],
        settings: {
          secrets: preset.settings?.secrets?.dynamic ? { dynamic: preset.settings.secrets.dynamic } : { dynamic: [] },
          voice: preset.settings?.voice || { model: "" },
          ragKnowledge: preset.settings?.ragKnowledge || false,
          email: {
            outgoing: preset.settings?.email?.outgoing || { service: "gmail", host: "", port: 0, secure: false, user: "", pass: "" },
            incoming: preset.settings?.email?.incoming || { service: "imap", host: "", port: 993, user: "", pass: "" },
          },
        },
        style: {
          all: preset.style?.all || [],
          chat: preset.style?.chat || [],
          post: preset.style?.post || [],
        },
        knowledge: preset.knowledge || [],
      });
      setBioInput(preset.bio?.join(",\n\n") || "");
      setLoreInput(preset.lore?.join(",\n") || "");
      setMessageExamplesInput(
        JSON.stringify(preset.messageExamples?.map((msg: any) => msg.conversation) || [], null, 2)
      );
      setPostExamplesInput(preset.postExamples?.join(",\n") || "");
      setTopicsInput(preset.topics?.join(",\n") || "");
      setAdjectivesInput(preset.adjectives?.join(",\n") || "");
      setStyleAllInput(preset.style?.all?.join(",\n") || "");
      setStyleChatInput(preset.style?.chat?.join(",\n") || "");
      setStylePostInput(preset.style?.post?.join(",\n") || "");
      setSecrets(preset.settings?.secrets?.dynamic || [{ key: "", value: "" }]);
      setEmailOutgoingUser(preset.settings?.email?.outgoing?.user || "");
      setEmailOutgoingPass(preset.settings?.email?.outgoing?.pass || "");
      setEmailIncomingUser(preset.settings?.email?.incoming?.user || "");
      setEmailIncomingPass(preset.settings?.email?.incoming?.pass || "");
    }
  };
useEffect(() => {
    setCharacterData((prev) => {
      let parsedMessageExamples = prev.messageExamples;
      let jsonError: string | null = null;

      if (messageExamplesInput) {
        try {
          parsedMessageExamples = JSON.parse(messageExamplesInput);
          if (!Array.isArray(parsedMessageExamples) || !parsedMessageExamples.every(Array.isArray)) {
            jsonError = "Message Examples must be an array of arrays";
            setMessageExamplesError(jsonError);
            parsedMessageExamples = [];
          } else {
            const isValid = parsedMessageExamples.every((example) =>
              example.every(
                (msg) =>
                  msg &&
                  typeof msg === "object" &&
                  "user" in msg &&
                  "content" in msg &&
                  msg.content &&
                  typeof msg.content === "object" &&
                  "text" in msg.content
              )
            );
            if (!isValid) {
              jsonError = "Each message example must contain objects with 'user' and 'content' properties, where 'content' has a 'text' property";
              setMessageExamplesError(jsonError);
              parsedMessageExamples = [];
            } else {
              setMessageExamplesError(null);
            }
          }
        } catch (error) {
          jsonError = "Invalid JSON format in Message Examples";
          setMessageExamplesError(jsonError);
          parsedMessageExamples = [];
        }
      } else {
        parsedMessageExamples = [];
        setMessageExamplesError(null);
      }

      return {
        ...prev,
        bio: bioInput ? bioInput.split(/,\s*\n/).map((s) => s.trim()).filter((s) => s) : [],
        lore: loreInput ? loreInput.split(/,\s*\n/).map((s) => s.trim()).filter((s) => s) : [],
        messageExamples: parsedMessageExamples,
        postExamples: postExamplesInput ? postExamplesInput.split(/,\s*\n/).map((s) => s.trim()).filter((s) => s) : [],
        topics: topicsInput ? topicsInput.split(/,\s*\n/).map((s) => s.trim()).filter((s) => s) : [],
        adjectives: adjectivesInput ? adjectivesInput.split(/,\s*\n/).map((s) => s.trim()).filter((s) => s) : [],
        style: {
          all: styleAllInput ? styleAllInput.split(/,\s*\n/).map((s) => s.trim()).filter((s) => s) : [],
          chat: styleChatInput ? styleChatInput.split(/,\s*\n/).map((s) => s.trim()).filter((s) => s) : [],
          post: stylePostInput ? stylePostInput.split(/,\s*\n/).map((s) => s.trim()).filter((s) => s) : [],
        },
        settings: {
          ...prev.settings,
          email: {
            ...prev.settings.email,
            outgoing: {
              ...prev.settings.email.outgoing,
              user: emailOutgoingUser,
              pass: emailOutgoingPass,
            },
            incoming: {
              ...prev.settings.email.incoming,
              user: emailIncomingUser,
              pass: emailIncomingPass,
            },
          },
        },
      };
    });
  }, [
    bioInput,
    loreInput,
    messageExamplesInput,
    postExamplesInput,
    topicsInput,
    adjectivesInput,
    styleAllInput,
    styleChatInput,
    stylePostInput,
    emailOutgoingUser,
    emailOutgoingPass,
    emailIncomingUser,
    emailIncomingPass,
  ]);

  const handlePluginChange = async (plugin: string, checked: boolean) => {
    let activePlugins = userQuery.data?.activePlugins || [];
    console.log("[CREATE_CHARACTER] handlePluginChange:", {
      plugin,
      checked,
      activePlugins,
      userQueryStatus: userQuery.status,
      userQueryError: userQuery.error,
    });

    // Fallback: Fetch subscription items if plugin not in activePlugins
  if (!activePlugins.includes(plugin) && checked) {
    try {
      console.log("[CREATE_CHARACTER] Plugin not in activePlugins, fetching subscription items");
      const subscriptionData = await apiClient.getSubscriptionItems({ includeDetails: true });
      activePlugins = subscriptionData.plugins || [];
      console.log("[CREATE_CHARACTER] Fetched subscription items, activePlugins:", activePlugins);

      if (!activePlugins.includes(plugin)) {
        toast({
          variant: "destructive",
          title: "Subscription Required",
          description: `You need a subscription for the ${plugin} plugin. Please subscribe in the settings page.`,
          action: (
            <Button
              onClick={() => navigate("/settings", { state: { from: "create-character" } })}
              className="bg-agentvooc-button-bg text-agentvooc-accent hover:bg-agentvooc-accent hover:text-agentvooc-secondary-bg"
            >
              Go to Settings
            </Button>
          ),
        });
        return;
      }
    } catch (error) {
      console.error("[CREATE_CHARACTER] Error fetching subscription items:", error);
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to verify plugin subscription. Please try again.",
      });
      return;
    }
  }

 
      // Sync characterData with bioInput and loreInput
 

    setCharacterData((prev) => ({
      ...prev,
      plugins: checked
        ? [...prev.plugins, plugin]
        : prev.plugins.filter((p) => p !== plugin),
    }));
  };
  

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>
  ) => {
    const { name, value } = e.target;
    setCharacterData((prev) => ({ ...prev, [name]: value }));
  };

  const debouncedSetMessageExamplesInput = useCallback(
  debounce((value: string) => {
    setMessageExamplesInput(value);
  }, 300),
  []
);

const handleArrayInputChange = (
  e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,
  field: string
) => {
  const value = e.target.value;
  if (field === "bio") {
    setBioInput(value);
  } else if (field === "lore") {
    setLoreInput(value);
  } else if (field === "messageExamples") {
    debouncedSetMessageExamplesInput(value);
  } else if (field === "postExamples") {
    setPostExamplesInput(value);
  } else if (field === "topics") {
    setTopicsInput(value);
  } else if (field === "adjectives") {
    setAdjectivesInput(value);
  } else if (field === "styleAll") {
    setStyleAllInput(value);
  } else if (field === "styleChat") {
    setStyleChatInput(value);
  } else if (field === "stylePost") {
    setStylePostInput(value);
  }
};

  const handleAdvancedInputChange = (
    e: React.ChangeEvent<
      HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
    >,
    field: string,
    subfield?: string
  ) => {
    const value = e.target.value;
    setCharacterData((prev) => {
      if (field === "settings" && subfield) {
        if (subfield === "voiceModel") {
          return {
            ...prev,
            settings: {
              ...prev.settings,
              voice: { model: value },
            },
          };
        }
        if (subfield === "ragKnowledge") {
          return {
            ...prev,
            settings: {
              ...prev.settings,
              ragKnowledge: value === "true",
            },
          };
        }
        if (subfield.startsWith("email.outgoing.")) {
          const key = subfield.split(".")[2];
          return {
            ...prev,
            settings: {
              ...prev.settings,
              email: {
                ...prev.settings.email,
                outgoing: {
                  ...prev.settings.email.outgoing,
                  [key]: key === "port" ? Number(value) : key === "secure" ? value === "true" : value,
                },
              },
            },
          };
        }
        if (subfield.startsWith("email.incoming.")) {
          const key = subfield.split(".")[2];
          return {
            ...prev,
            settings: {
              ...prev.settings,
              email: {
                ...prev.settings.email,
                incoming: {
                  ...prev.settings.email.incoming,
                  [key]: key === "port" ? Number(value) : value,
                },
              },
            },
          };
        }
        return prev;
      }
      if (field === "style" && subfield) {
        return {
          ...prev,
          style: {
            ...prev.style,
            [subfield]: value.split(",").map((s) => s.trim()).filter((s) => s),
          },
        };
      }
      if (field === "plugins") {
        return {
          ...prev,
          plugins: value.split(",").map((s) => s.trim()).filter((s) => s),
        };
      }
      return {
        ...prev,
        [field]: value,
      };
    });
  };



  // New handleEmailCheckbox function
const handleEmailCheckbox = (checked: boolean) => {
  handlePluginChange("email", checked);
  if (!checked) {
    setSecrets((prev) =>
      prev.filter(
        (s) =>
          ![
            "EMAIL_OUTGOING_USER",
            "EMAIL_OUTGOING_PASS",
            "EMAIL_INCOMING_USER",
            "EMAIL_INCOMING_PASS",
          ].includes(s.key)
      )
    );
    setEmailOutgoingUser("");
    setEmailOutgoingPass("");
    setEmailIncomingUser("");
    setEmailIncomingPass("");
    setCharacterData((prev) => ({
      ...prev,
      settings: {
        ...prev.settings,
        email: {
          outgoing: { service: "gmail", host: "", port: 0, secure: false, user: "", pass: "" },
          incoming: { service: "imap", host: "", port: 993, user: "", pass: "" },
        },
      },
    }));
  } else if (userQuery.data?.activePlugins.includes("email")) {
    const newSecrets = [
      { key: "EMAIL_OUTGOING_USER", value: emailOutgoingUser },
      { key: "EMAIL_OUTGOING_PASS", value: emailOutgoingPass },
      { key: "EMAIL_INCOMING_USER", value: emailIncomingUser },
      { key: "EMAIL_INCOMING_PASS", value: emailIncomingPass },
    ].filter((s) => s.value);
    
    setSecrets((prev) => {
      const filteredSecrets = prev.filter(
        (s) =>
          ![
            "EMAIL_OUTGOING_USER",
            "EMAIL_OUTGOING_PASS",
            "EMAIL_INCOMING_USER",
            "EMAIL_INCOMING_PASS",
          ].includes(s.key)
      );
      return [...filteredSecrets, ...newSecrets];
    });
  }
};

// New handlers for email input fields (to sync with secrets)
const handleEmailOutgoingUserChange = (e: React.ChangeEvent<HTMLInputElement>) => {
  const value = e.target.value;
  setEmailOutgoingUser(value);
  setSecrets((prev) => {
    const newSecrets = prev.filter((s) => s.key !== "EMAIL_OUTGOING_USER");
    if (value) {
      newSecrets.push({ key: "EMAIL_OUTGOING_USER", value });
    }
    return newSecrets;
  });
  setCharacterData((prev) => ({
    ...prev,
    settings: {
      ...prev.settings,
      email: {
        ...prev.settings.email,
        outgoing: { ...prev.settings.email.outgoing, user: value },
      },
    },
  }));
};

const handleEmailOutgoingPassChange = (e: React.ChangeEvent<HTMLInputElement>) => {
  const value = e.target.value;
  setEmailOutgoingPass(value);
  setSecrets((prev) => {
    const newSecrets = prev.filter((s) => s.key !== "EMAIL_OUTGOING_PASS");
    if (value) {
      newSecrets.push({ key: "EMAIL_OUTGOING_PASS", value });
    }
    return newSecrets;
  });
  setCharacterData((prev) => ({
    ...prev,
    settings: {
      ...prev.settings,
      email: {
        ...prev.settings.email,
        outgoing: { ...prev.settings.email.outgoing, pass: value },
      },
    },
  }));
};

const handleEmailIncomingUserChange = (e: React.ChangeEvent<HTMLInputElement>) => {
  const value = e.target.value;
  setEmailIncomingUser(value);
  setSecrets((prev) => {
    const newSecrets = prev.filter((s) => s.key !== "EMAIL_INCOMING_USER");
    if (value) {
      newSecrets.push({ key: "EMAIL_INCOMING_USER", value });
    }
    return newSecrets;
  });
  setCharacterData((prev) => ({
    ...prev,
    settings: {
      ...prev.settings,
      email: {
        ...prev.settings.email,
        incoming: { ...prev.settings.email.incoming, user: value },
      },
    },
  }));
};

const handleEmailIncomingPassChange = (e: React.ChangeEvent<HTMLInputElement>) => {
  const value = e.target.value;
  setEmailIncomingPass(value);
  setSecrets((prev) => {
    const newSecrets = prev.filter((s) => s.key !== "EMAIL_INCOMING_PASS");
    if (value) {
      newSecrets.push({ key: "EMAIL_INCOMING_PASS", value });
    }
    return newSecrets;
  });
  setCharacterData((prev) => ({
    ...prev,
    settings: {
      ...prev.settings,
      email: {
        ...prev.settings.email,
        incoming: { ...prev.settings.email.incoming, pass: value },
      },
    },
  }));
};



  const handleTelegramCheckbox = (checked: boolean) => {
    handlePluginChange("telegram", checked);
    if (!checked) {
      setSecrets((prev) => prev.filter((s) => s.key !== "TELEGRAM_BOT_TOKEN"));
      setTelegramBotToken("");
    } else if (userQuery.data?.activePlugins.includes("telegram")) {
      setSecrets((prev) => {
        if (!prev.some((s) => s.key === "TELEGRAM_BOT_TOKEN")) {
          return [...prev, { key: "TELEGRAM_BOT_TOKEN", value: telegramBotToken }];
        }
        return prev;
      });
    }
  };

  const handleTelegramBotTokenChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setTelegramBotToken(value);
    setSecrets((prev) => {
      const newSecrets = prev.filter((s) => s.key !== "TELEGRAM_BOT_TOKEN");
      if (value) {
        newSecrets.push({ key: "TELEGRAM_BOT_TOKEN", value });
      }
      return newSecrets;
    });
  };

  const handleTwitterCheckbox = (checked: boolean) => {
    handlePluginChange("twitter", checked);
    if (!checked) {
      setSecrets((prev) =>
        prev.filter(
          (s) => !["TWITTER_USERNAME", "TWITTER_PASSWORD", "TWITTER_EMAIL"].includes(s.key)
        )
      );
      setTwitterUsername("");
      setTwitterPassword("");
      setTwitterEmail("");
    } else if (userQuery.data?.activePlugins.includes("twitter")) {
      setSecrets((prev) => {
        const newSecrets = prev.filter(
          (s) => !["TWITTER_USERNAME", "TWITTER_PASSWORD", "TWITTER_EMAIL"].includes(s.key)
        );
        return [
          ...newSecrets,
          { key: "TWITTER_USERNAME", value: twitterUsername },
          { key: "TWITTER_PASSWORD", value: twitterPassword },
          { key: "TWITTER_EMAIL", value: twitterEmail },
        ].filter((s) => s.value);
      });
    }
  };

  const handleTwitterUsernameChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setTwitterUsername(value);
    setSecrets((prev) => {
      const newSecrets = prev.filter((s) => s.key !== "TWITTER_USERNAME");
      if (value) {
        newSecrets.push({ key: "TWITTER_USERNAME", value });
      }
      return newSecrets;
    });
  };

  const handleTwitterPasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setTwitterPassword(value);
    setSecrets((prev) => {
      const newSecrets = prev.filter((s) => s.key !== "TWITTER_PASSWORD");
      if (value) {
        newSecrets.push({ key: "TWITTER_PASSWORD", value });
      }
      return newSecrets;
    });
  };

  const handleTwitterEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setTwitterEmail(value);
    setSecrets((prev) => {
      const newSecrets = prev.filter((s) => s.key !== "TWITTER_EMAIL");
      if (value) {
        newSecrets.push({ key: "TWITTER_EMAIL", value });
      }
      return newSecrets;
    });
  };

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      if (!["image/jpeg", "image/png", "image/gif"].includes(file.type)) {
        setError("Invalid file type. Only JPEG, PNG, and GIF are allowed.");
        toast({
          variant: "destructive",
          title: "Error",
          description: "Invalid file type. Only JPEG, PNG, and GIF are allowed.",
        });
        return;
      }
      setProfileImage(file);
      const reader = new FileReader();
      reader.onload = () => {
        setImagePreview(reader.result as string);
      };
      reader.readAsDataURL(file);
      setError(null);
    }
  };

  const handleSecretChange = (
    index: number,
    field: "key" | "value",
    value: string
  ) => {
    setSecrets((prev) => {
      const newSecrets = [...prev];
      newSecrets[index] = { ...newSecrets[index], [field]: value };
      return newSecrets;
    });
    setSecretsError(null);
  };

  const addSecret = () => {
    setSecrets((prev) => [...prev, { key: "", value: "" }]);
  };

  const removeSecret = (index: number) => {
    setSecrets((prev) => prev.filter((_, i) => i !== index));
  };

  const uploadImageMutation = useMutation({
    mutationFn: async ({ characterId, file }: { characterId: UUID; file: File }) => {
      console.log("[CREATE_CHARACTER] Uploading profile image for characterId:", characterId);
      const formData = new FormData();
      formData.append("image", file);
      const response = await apiClient.uploadCharacterProfileImage(characterId, formData);
      console.log("[CREATE_CHARACTER] Image upload response:", response);
      return response;
    },
    onSuccess: (response) => {
      console.log("[CREATE_CHARACTER] Profile image uploaded successfully, URL:", response.url);
      toast({
        title: "Success",
        description: "Profile image uploaded successfully.",
      });
      queryClient.invalidateQueries({ queryKey: ["characters"] });
    },
    onError: (error: any) => {
      console.error("[CREATE_CHARACTER] Image upload error:", error);
      setError("Failed to upload image: " + (error.message || "Unknown error"));
      toast({
        variant: "destructive",
        title: "Error",
        description: error.message || "Failed to upload image.",
      });
      if (error.status === 401 && window.location.pathname !== "/auth") {
        console.log("[CREATE_CHARACTER] 401 error, redirecting to /auth");
        navigate("/auth");
      }
    },
  });

  const createCharacterMutation = useMutation({
  mutationFn: async () => {
    const validSecrets = secrets.filter(
      (secret) => secret.key.trim() && secret.value.trim()
    );
    
    // Validate email settings if email plugin is enabled
    if (characterData.plugins.includes("email") || characterData.plugins.includes("emailautomation")) {
      if (
        !emailOutgoingUser ||
        !emailOutgoingPass ||
        !emailIncomingUser ||
        !emailIncomingPass
      ) {
        throw new Error("All email fields (username and password for both outgoing and incoming) are required when email plugin is enabled.");
      }
      if (characterData.settings.email.outgoing.service === "smtp" && (!characterData.settings.email.outgoing.host || !characterData.settings.email.outgoing.port)) {
        throw new Error("SMTP host and port are required when using SMTP service.");
      }
    }

    // Validate messageExamples JSON
      let parsedMessageExamples;
      try {
        parsedMessageExamples = messageExamplesInput ? JSON.parse(messageExamplesInput) : [];
        if (!Array.isArray(parsedMessageExamples) || !parsedMessageExamples.every(Array.isArray)) {
          throw new Error("Message Examples must be an array of arrays");
        }
        const isValid = parsedMessageExamples.every((example) =>
          example.every(
            (msg) =>
              msg &&
              typeof msg === "object" &&
              "user" in msg &&
              "content" in msg &&
              msg.content &&
              typeof msg.content === "object" &&
              "text" in msg.content
          )
        );
        if (!isValid) {
          throw new Error("Each message example must contain objects with 'user' and 'content' properties, where 'content' has a 'text' property");
        }
      } catch (error) {
        throw new Error(
          "Invalid JSON format in Message Examples: " +
            (error instanceof Error ? error.message : String(error))
        );
      }

     const updatedCharacterData = {
        id: characterData.id,
        name: characterData.name,
        username: characterData.username || undefined,
        system: characterData.system || undefined,
        bio: bioInput ? bioInput.split(/,\s*\n/).map((s) => s.trim()).filter((s) => s) : [],
        lore: loreInput ? loreInput.split(/,\s*\n/).map((s) => s.trim()).filter((s) => s) : [],
        messageExamples: parsedMessageExamples,
        postExamples: postExamplesInput ? postExamplesInput.split(/,\s*\n/).map((s) => s.trim()).filter((s) => s) : [],
        topics: topicsInput ? topicsInput.split(/,\s*\n/).map((s) => s.trim()).filter((s) => s) : [],
        adjectives: adjectivesInput ? adjectivesInput.split(/,\s*\n/).map((s) => s.trim()).filter((s) => s) : [],
        modelProvider: characterData.modelProvider || "OPENAI",
        plugins: characterData.plugins || [],
        knowledge: characterData.knowledge || [],
        settings: {
          secrets: validSecrets.length ? { dynamic: validSecrets } : undefined,
          voice: characterData.settings.voice.model ? characterData.settings.voice : undefined,
          ragKnowledge: characterData.settings.ragKnowledge,
          email: characterData.plugins.some((p) => ["email", "emailautomation"].includes(p))
            ? {
                outgoing: {
                  ...characterData.settings.email.outgoing,
                  user: emailOutgoingUser,
                  pass: emailOutgoingPass,
                },
                incoming: {
                  ...characterData.settings.email.incoming,
                  user: emailIncomingUser,
                  pass: emailIncomingPass,
                },
              }
            : undefined,
        },
        style: {
          all: styleAllInput ? styleAllInput.split(/,\s*\n/).map((s) => s.trim()).filter((s) => s) : [],
          chat: styleChatInput ? styleChatInput.split(/,\s*\n/).map((s) => s.trim()).filter((s) => s) : [],
          post: stylePostInput ? stylePostInput.split(/,\s*\n/).map((s) => s.trim()).filter((s) => s) : [],
        },
      };


    console.log("[CREATE_CHARACTER] Creating character with payload:", JSON.stringify(updatedCharacterData, null, 2));
    const createResponse = await apiClient.createCharacter(updatedCharacterData);
    console.log("[CREATE_CHARACTER] Create character response:", createResponse);

    if (profileImage) {
      await uploadImageMutation.mutateAsync({ characterId: characterData.id, file: profileImage });
      console.log("[CREATE_CHARACTER] Profile image upload initiated");
    }

    return characterData.id;
  },

  onSuccess: (characterId) => {
      console.log("[CREATE_CHARACTER] Character created successfully, ID:", characterId);
      queryClient.invalidateQueries({ queryKey: ["characters"] });
      toast({
        title: "Success",
        description: `Character "${characterData.name}" created successfully.`,
      });
      // Reset form to empty fields
      setCharacterData({
        id: uuidv4() as UUID,
        name: "",
        username: "",
        system: "",
        bio: [],
        lore: [],
        messageExamples: [],
        postExamples: [],
        topics: [],
        adjectives: [],
        modelProvider: "OPENAI",
        plugins: [],
        settings: {
          secrets: { dynamic: [] },
          voice: { model: "" },
          ragKnowledge: false,
          email: {
            outgoing: { service: "gmail", host: "", port: 0, secure: false, user: "", pass: "" },
            incoming: { service: "imap", host: "", port: 993, user: "", pass: "" },
          },
        },
        style: {
          all: [],
          chat: [],
          post: [],
        },
        knowledge: [],
      });
      setBioInput("");
      setLoreInput("");
      setMessageExamplesInput("[]");
      setPostExamplesInput("");
      setTopicsInput("");
      setAdjectivesInput("");
      setStyleAllInput("");
      setStyleChatInput("");
      setStylePostInput("");
      setSecrets([{ key: "", value: "" }]);
      setProfileImage(null);
      setImagePreview(null);
      setError(null);
      setSecretsError(null);
      setTelegramBotToken("");
      setTwitterUsername("");
      setTwitterPassword("");
      setTwitterEmail("");
      setEmailOutgoingUser("");
      setEmailOutgoingPass("");
      setEmailIncomingUser("");
      setEmailIncomingPass("");
      setSelectedPreset(null);
      navigate("/home");
    },
  onError: (error: any) => {
      console.error("[CREATE_CHARACTER] Character creation error:", error);
      const errorMessage = error.message || "Failed to create character";
      if (errorMessage.includes("Duplicate keys found in secrets")) {
        setSecretsError(errorMessage);
      } else {
        setError(errorMessage);
      }
      toast({
        variant: "destructive",
        title: "Error",
        description: errorMessage,
      });
      if (error.status === 401 && window.location.pathname !== "/auth") {
        console.log("[CREATE_CHARACTER] 401 error, redirecting to /auth");
        navigate("/auth");
      }
    },
  });

  const handleSubmit = (e: React.FormEvent) => {
  e.preventDefault();
  if (!characterData.name) {
    setError("Character name is required.");
    toast({
      variant: "destructive",
      title: "Error",
      description: "Character name is required.",
    });
    return;
  }
  const secretKeys = secrets.map((s) => s.key.trim()).filter((k) => k);
  if (new Set(secretKeys).size !== secretKeys.length) {
    setSecretsError("Invalid key: Duplicate keys found in secrets");
    toast({
      variant: "destructive",
      title: "Error",
      description: "Duplicate keys found in secrets",
    });
    return;
  }
  if (characterData.plugins.includes("email") || characterData.plugins.includes("emailautomation")) {
    if (
      !emailOutgoingUser ||
      !emailOutgoingPass ||
      !emailIncomingUser ||
      !emailIncomingPass
    ) {
      setError("All email fields (username and password for both outgoing and incoming) are required.");
      toast({
        variant: "destructive",
        title: "Error",
        description: "All email fields (username and password for both outgoing and incoming) are required.",
      });
      return;
    }
    if (
      characterData.settings.email.outgoing.service === "smtp" &&
      (!characterData.settings.email.outgoing.host || !characterData.settings.email.outgoing.port)
    ) {
      setError("SMTP host and port are required when using SMTP service.");
      toast({
        variant: "destructive",
        title: "Error",
        description: "SMTP host and port are required when using SMTP service.",
      });
      return;
    }
  }
  try {
    if (messageExamplesInput) {
      JSON.parse(messageExamplesInput);
    }
  } catch (error) {
    setError("Invalid JSON format in Message Examples");
    toast({
      variant: "destructive",
      title: "Error",
      description: "Invalid JSON format in Message Examples. Please check the syntax.",
    });
    return;
  }
  console.log("[CREATE_CHARACTER] Submitting character creation form");
  createCharacterMutation.mutate();
};

  const handleCancel = () => {
    console.log("[CREATE_CHARACTER] Canceling character creation");
    navigate("/home");
  };


  

return (
  <div className="min-h-screen bg-gradient-to-br from-agentvooc-secondary-bg via-agentvooc-secondary-accent/20 to-agentvooc-secondary-bg p-6">
    <div className="max-w-5xl mx-auto">
      {/* Header Card */}
      <Card className="bg-agentvooc-secondary-bg/90 backdrop-blur-sm border border-agentvooc-accent/30 shadow-agentvooc-glow mb-8">
        <CardHeader>
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-gradient-to-r from-agentvooc-accent to-agentvooc-button-bg rounded-lg flex items-center justify-center">
              <User className="w-5 h-5 text-agentvooc-secondary-bg" />
            </div>
            <CardTitle className="text-2xl font-bold text-agentvooc-primary">
              Create New Character
            </CardTitle>
          </div>
          <p className="text-agentvooc-secondary">Design your AI agent with personality and integrations</p>
        </CardHeader>
        <CardContent>
          <div className="mb-6">
            <label className="block text-sm font-semibold text-agentvooc-secondary mb-3 uppercase tracking-wider">
              Select a Preset
            </label>
            <div className="flex flex-wrap gap-3">
              <Button
                variant={selectedPreset === null ? "default" : "outline"}
                onClick={() => handlePresetSelect(null)}
                className={
                  selectedPreset === null
                    ? "bg-gradient-to-r from-agentvooc-accent to-agentvooc-button-bg text-agentvooc-secondary-bg hover:bg-agentvooc-accent shadow-lg"
                    : "border-agentvooc-accent/30 text-agentvooc-primary hover:bg-agentvooc-accent/10"
                }
              >
                Create Your Own
              </Button>
              {presetsQuery.isLoading ? (
                <div className="flex items-center space-x-2 px-4 py-2 bg-agentvooc-secondary-accent/20 rounded-lg">
                  <Loader2 className="w-4 h-4 animate-spin text-agentvooc-accent" />
                  <span className="text-agentvooc-secondary">Loading presets...</span>
                </div>
              ) : presetsQuery.isError ? (
                <div className="px-4 py-2 bg-red-500/10 border border-red-500/30 rounded-lg text-red-400">
                  Error loading presets: {presetsQuery.error.message}
                </div>
              ) : (
                presetsQuery.data?.map((preset: any) => (
                  <Button
                    key={preset._id}
                    variant={selectedPreset === preset._id ? "default" : "outline"}
                    onClick={() => handlePresetSelect(preset)}
                    className={
                      selectedPreset === preset._id
                        ? "bg-gradient-to-r from-agentvooc-accent to-agentvooc-button-bg text-agentvooc-secondary-bg hover:bg-agentvooc-accent shadow-lg"
                        : "border-agentvooc-accent/30 text-agentvooc-primary hover:bg-agentvooc-accent/10"
                    }
                  >
                    {preset.name}
                  </Button>
                ))
              )}
            </div>
          </div>
        </CardContent>
      </Card>

      <form onSubmit={handleSubmit} className="space-y-8">
        {/* Basic Information Card */}
        <Card className="bg-agentvooc-secondary-bg/90 backdrop-blur-sm border border-agentvooc-accent/30 shadow-agentvooc-glow">
          <CardHeader>
            <div className="flex items-center space-x-3">
              <User className="w-6 h-6 text-agentvooc-accent" />
              <CardTitle className="text-xl font-semibold text-agentvooc-primary">
                Basic Information
              </CardTitle>
            </div>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label htmlFor="name" className="block text-sm font-semibold text-agentvooc-secondary mb-2 uppercase tracking-wider">
                  Character Name *
                </label>
                <Input
                  id="name"
                  name="name"
                  type="text"
                  value={characterData.name}
                  onChange={handleInputChange}
                  placeholder="Enter character name (e.g., Eliza)"
                  className="bg-agentvooc-secondary-accent/50 border-agentvooc-accent/30 focus:ring-agentvooc-accent"
                  required
                />
              </div>
              <div>
                <label htmlFor="username" className="block text-sm font-semibold text-agentvooc-secondary mb-2 uppercase tracking-wider">
                  Username
                </label>
                <Input
                  id="username"
                  name="username"
                  type="text"
                  value={characterData.username}
                  onChange={handleInputChange}
                  placeholder="Enter username (e.g., eliza)"
                  className="bg-agentvooc-secondary-accent/50 border-agentvooc-accent/30 focus:ring-agentvooc-accent"
                />
              </div>
            </div>
            <div>
              <label htmlFor="profileImage" className="block text-sm font-semibold text-agentvooc-secondary mb-2 uppercase tracking-wider">
                Profile Image
              </label>
              <div className="flex items-center space-x-4">
                {imagePreview && (
                  <img
                    src={imagePreview}
                    alt="Profile preview"
                    className="w-20 h-20 object-cover rounded-lg border border-agentvooc-accent/30"
                  />
                )}
                <Input
                  id="profileImage"
                  name="profileImage"
                  type="file"
                  accept="image/jpeg,image/png,image/gif"
                  onChange={handleImageChange}
                  className="bg-agentvooc-secondary-accent/50 border-agentvooc-accent/30 focus:ring-agentvooc-accent"
                />
              </div>
              {profileImage && (
                <p className="text-sm text-agentvooc-secondary mt-2">
                  Selected: {profileImage.name}
                </p>
              )}
            </div>
            <div>
              <label htmlFor="system" className="block text-sm font-semibold text-agentvooc-secondary mb-2 uppercase tracking-wider">
                System Prompt
              </label>
              <Textarea
                id="system"
                name="system"
                value={characterData.system}
                onChange={handleInputChange}
                placeholder="Enter system prompt (e.g., Roleplay as a Web3 developer)"
                className="bg-agentvooc-secondary-accent/50 border-agentvooc-accent/30 focus:ring-agentvooc-accent"
                style={{
                  minHeight: '120px',
                  maxHeight: '288px',
                  height: `${Math.min(288, Math.max(120, (characterData.system.split('\n').length + 2) * 24))}px`,
                  paddingBottom: '3rem',
                }}
              />
            </div>
          </CardContent>
        </Card>

        {/* Personality Card */}
        <Card className="bg-agentvooc-secondary-bg/90 backdrop-blur-sm border border-agentvooc-accent/30 shadow-agentvooc-glow">
          <CardHeader>
            <div className="flex items-center space-x-3">
              <Heart className="w-6 h-6 text-agentvooc-accent" />
              <CardTitle className="text-xl font-semibold text-agentvooc-primary">
                Personality
              </CardTitle>
            </div>
          </CardHeader>
          <CardContent className="space-y-6">
            <div>
              <label htmlFor="bio" className="block text-sm font-semibold text-agentvooc-secondary mb-2 uppercase tracking-wider">
                Bio (comma-separated, one per line)
              </label>
              <Textarea
                id="bio"
                name="bio"
                value={bioInput}
                onChange={(e) => handleArrayInputChange(e, "bio")}
                placeholder="Enter bio statements, one per line (e.g., Web3 developer,\nSecurity-minded)"
                className="bg-agentvooc-secondary-accent/50 border-agentvooc-accent/30 focus:ring-agentvooc-accent"
                style={{
                  minHeight: '120px',
                  maxHeight: '288px',
                  height: `${Math.min(288, Math.max(120, (bioInput.split('\n').length + 2) * 24))}px`,
                  paddingBottom: '3rem',
                }}
              />
            </div>
            <div>
              <label htmlFor="lore" className="block text-sm font-semibold text-agentvooc-secondary mb-2 uppercase tracking-wider">
                Lore (comma-separated, one per line)
              </label>
              <Textarea
                id="lore"
                name="lore"
                value={loreInput}
                onChange={(e) => handleArrayInputChange(e, "lore")}
                placeholder="Enter lore snippets, one per line (e.g., Started in Web2,\nContributes to Ethereum)"
                className="bg-agentvooc-secondary-accent/50 border-agentvooc-accent/30 focus:ring-agentvooc-accent"
                style={{
                  minHeight: '120px',
                  maxHeight: '288px',
                  height: `${Math.min(288, Math.max(120, (loreInput.split('\n').length + 2) * 24))}px`,
                  paddingBottom: '3rem',
                }}
              />
            </div>
            <div>
              <label htmlFor="topics" className="block text-sm font-semibold text-agentvooc-secondary mb-2 uppercase tracking-wider">
                Topics (comma-separated, one per line)
              </label>
              <Textarea
                id="topics"
                name="topics"
                value={topicsInput}
                onChange={(e) => handleArrayInputChange(e, "topics")}
                placeholder="Enter topics, one per line (e.g., Web3,\nBlockchain)"
                className="bg-agentvooc-secondary-accent/50 border-agentvooc-accent/30 focus:ring-agentvooc-accent"
                style={{
                  minHeight: '120px',
                  maxHeight: '288px',
                  height: `${Math.min(288, Math.max(120, (topicsInput.split('\n').length + 2) * 24))}px`,
                  paddingBottom: '3rem',
                }}
              />
            </div>
            <div>
              <label htmlFor="adjectives" className="block text-sm font-semibold text-agentvooc-secondary mb-2 uppercase tracking-wider">
                Personality (comma-separated, one per line)
              </label>
              <Textarea
                id="adjectives"
                name="adjectives"
                value={adjectivesInput}
                onChange={(e) => handleArrayInputChange(e, "adjectives")}
                placeholder="Enter personality traits, one per line (e.g., witty,\ntechnical)"
                className="bg-agentvooc-secondary-accent/50 border-agentvooc-accent/30 focus:ring-agentvooc-accent"
                style={{
                  minHeight: '120px',
                  maxHeight: '288px',
                  height: `${Math.min(288, Math.max(120, (adjectivesInput.split('\n').length + 2) * 24))}px`,
                  paddingBottom: '3rem',
                }}
              />
            </div>
          </CardContent>
        </Card>

        {/* Communication Style Card */}
        <Card className="bg-agentvooc-secondary-bg/90 backdrop-blur-sm border border-agentvooc-accent/30 shadow-agentvooc-glow">
          <CardHeader>
            <div className="flex items-center space-x-3">
              <MessageCircle className="w-6 h-6 text-agentvooc-accent" />
              <CardTitle className="text-xl font-semibold text-agentvooc-primary">
                Communication Style
              </CardTitle>
            </div>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div>
                <label htmlFor="styleAll" className="block text-sm font-semibold text-agentvooc-secondary mb-2 uppercase tracking-wider">
                  Style: All Contexts
                </label>
                <Textarea
                  id="styleAll"
                  name="styleAll"
                  value={styleAllInput}
                  onChange={(e) => handleArrayInputChange(e, "styleAll")}
                  placeholder="Enter styles, one per line (e.g., concise,\nwitty)"
                  className="bg-agentvooc-secondary-accent/50 border-agentvooc-accent/30 focus:ring-agentvooc-accent"
                  style={{
                    minHeight: '120px',
                    maxHeight: '288px',
                    height: `${Math.min(288, Math.max(120, (styleAllInput.split('\n').length + 2) * 24))}px`,
                    paddingBottom: '3rem',
                  }}
                />
              </div>
              <div>
                <label htmlFor="styleChat" className="block text-sm font-semibold text-agentvooc-secondary mb-2 uppercase tracking-wider">
                  Style: Chat
                </label>
                <Textarea
                  id="styleChat"
                  name="styleChat"
                  value={styleChatInput}
                  onChange={(e) => handleArrayInputChange(e, "styleChat")}
                  placeholder="Enter chat styles, one per line (e.g., playful,\ndynamic)"
                  className="bg-agentvooc-secondary-accent/50 border-agentvooc-accent/30 focus:ring-agentvooc-accent"
                  style={{
                    minHeight: '120px',
                    maxHeight: '288px',
                    height: `${Math.min(288, Math.max(120, (styleChatInput.split('\n').length + 2) * 24))}px`,
                    paddingBottom: '3rem',
                  }}
                />
              </div>
              <div>
                <label htmlFor="stylePost" className="block text-sm font-semibold text-agentvooc-secondary mb-2 uppercase tracking-wider">
                  Style: Post
                </label>
                <Textarea
                  id="stylePost"
                  name="stylePost"
                  value={stylePostInput}
                  onChange={(e) => handleArrayInputChange(e, "stylePost")}
                  placeholder="Enter post styles, one per line (e.g., ironic,\nrelevant)"
                  className="bg-agentvooc-secondary-accent/50 border-agentvooc-accent/30 focus:ring-agentvooc-accent"
                  style={{
                    minHeight: '120px',
                    maxHeight: '288px',
                    height: `${Math.min(288, Math.max(120, (stylePostInput.split('\n').length + 2) * 24))}px`,
                    paddingBottom: '3rem',
                  }}
                />
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Examples Card */}
        <Card className="bg-agentvooc-secondary-bg/90 backdrop-blur-sm border border-agentvooc-accent/30 shadow-agentvooc-glow">
          <CardHeader>
            <div className="flex items-center space-x-3">
              <FileText className="w-6 h-6 text-agentvooc-accent" />
              <CardTitle className="text-xl font-semibold text-agentvooc-primary">
                Examples
              </CardTitle>
            </div>
          </CardHeader>
          <CardContent className="space-y-6">
            <div>
              <label htmlFor="messageExamples" className="block text-sm font-semibold text-agentvooc-secondary mb-2 uppercase tracking-wider">
                Message Examples (JSON format)
              </label>
              <Textarea
                id="messageExamples"
                name="messageExamples"
                value={messageExamplesInput}
                onChange={(e) => handleArrayInputChange(e, "messageExamples")}
                placeholder={`Example format:\n[\n  [\n    {"user": "{{user1}}", "content": {"text": "Question"}},\n    {"user": "CharacterName", "content": {"text": "Answer"}}\n  ],\n  [...]\n]`}
                className="bg-agentvooc-secondary-accent/50 border-agentvooc-accent/30 focus:ring-agentvooc-accent font-mono"
                style={{
                  minHeight: '120px',
                  maxHeight: '288px',
                  height: `${Math.min(288, Math.max(120, (messageExamplesInput.split('\n').length + 2) * 24))}px`,
                  paddingBottom: '3rem',
                }}
              />
              {messageExamplesError && (
                <p className="text-red-500 text-sm mt-2">{messageExamplesError}</p>
              )}
            </div>
            <div>
              <label htmlFor="postExamples" className="block text-sm font-semibold text-agentvooc-secondary mb-2 uppercase tracking-wider">
                Post Examples (comma-separated, one per line)
              </label>
              <Textarea
                id="postExamples"
                name="postExamples"
                value={postExamplesInput}
                onChange={(e) => handleArrayInputChange(e, "postExamples")}
                placeholder="Enter post examples, one per line (e.g., Debugged for 3 hours,\nGas fees are forever)"
                className="bg-agentvooc-secondary-accent/50 border-agentvooc-accent/30 focus:ring-agentvooc-accent"
                style={{
                  minHeight: '120px',
                  maxHeight: '288px',
                  height: `${Math.min(288, Math.max(120, (postExamplesInput.split('\n').length + 2) * 24))}px`,
                  paddingBottom: '3rem',
                }}
              />
            </div>
          </CardContent>
        </Card>

        {/* Plugins Card */}
        <Card className="bg-agentvooc-secondary-bg/95 backdrop-blur-md border-2 border-agentvooc-accent/50 shadow-lg shadow-agentvooc-accent/20">
          <CardHeader>
            <div className="flex items-center space-x-3">
              <Zap className="w-6 h-6 text-agentvooc-accent" />
              <CardTitle className="text-xl font-semibold text-agentvooc-primary">
                Plugins
              </CardTitle>
            </div>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Email Plugin */}
              <div>
                <div className="flex items-center space-x-2 mb-2">
                  <input
                    id="enableEmailPlugin"
                    name="enableEmailPlugin"
                    type="checkbox"
                    checked={characterData.plugins.includes("email")}
                    onChange={(e) => handleEmailCheckbox(e.target.checked)}
                    className="text-agentvooc-accent focus:ring-agentvooc-accent rounded"
                  />
                  <label htmlFor="enableEmailPlugin" className="text-sm font-semibold text-agentvooc-secondary uppercase tracking-wider">
                    Enable Email Plugin
                  </label>
                </div>
                {(characterData.plugins.includes("email") || characterData.plugins.includes("emailautomation")) && (
                  <div className="space-y-4 p-4 bg-agentvooc-secondary-accent/20 rounded-lg">
                    <div>
                      <label htmlFor="emailOutgoingService" className="block text-sm font-medium text-agentvooc-secondary mb-1">
                        Outgoing Service
                      </label>
                      <select
                        id="emailOutgoingService"
                        name="emailOutgoingService"
                        value={characterData.settings.email.outgoing.service}
                        onChange={(e) => handleAdvancedInputChange(e, "settings", "email.outgoing.service")}
                        className="w-full p-2 rounded-lg bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-agentvooc-accent"
                      >
                        <option value="gmail">Gmail</option>
                        <option value="smtp">SMTP</option>
                      </select>
                    </div>
                    {characterData.settings.email.outgoing.service === "smtp" && (
                      <>
                        <div>
                          <label htmlFor="emailOutgoingHost" className="block text-sm font-medium text-agentvooc-secondary mb-1">
                            Host
                          </label>
                          <Input
                            id="emailOutgoingHost"
                            name="emailOutgoingHost"
                            type="text"
                            value={characterData.settings.email.outgoing.host}
                            onChange={(e) => handleAdvancedInputChange(e, "settings", "email.outgoing.host")}
                            placeholder="e.g., smtp.example.com"
                            className="bg-agentvooc-secondary-accent/50 border-agentvooc-accent/30 focus:ring-agentvooc-accent"
                          />
                        </div>
                        <div>
                          <label htmlFor="emailOutgoingPort" className="block text-sm font-medium text-agentvooc-secondary mb-1">
                            Port
                          </label>
                          <Input
                            id="emailOutgoingPort"
                            name="emailOutgoingPort"
                            type="number"
                            value={characterData.settings.email.outgoing.port}
                            onChange={(e) => handleAdvancedInputChange(e, "settings", "email.outgoing.port")}
                            placeholder="e.g., 587"
                            className="bg-agentvooc-secondary-accent/50 border-agentvooc-accent/30 focus:ring-agentvooc-accent"
                          />
                        </div>
                        <div>
                          <label htmlFor="emailOutgoingSecure" className="block text-sm font-medium text-agentvooc-secondary mb-1">
                            Secure (TLS)
                          </label>
                          <select
                            id="emailOutgoingSecure"
                            name="emailOutgoingSecure"
                            value={characterData.settings.email.outgoing.secure.toString()}
                            onChange={(e) => handleAdvancedInputChange(e, "settings", "email.outgoing.secure")}
                            className="w-full p-2 rounded-lg bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-agentvooc-accent"
                          >
                            <option value="true">Yes</option>
                            <option value="false">No</option>
                          </select>
                        </div>
                      </>
                    )}
                    <div>
                      <label htmlFor="emailOutgoingUser" className="block text-sm font-medium text-agentvooc-secondary mb-1">
                        Username
                      </label>
                      <Input
                        id="emailOutgoingUser"
                        name="emailOutgoingUser"
                        type="text"
                        value={emailOutgoingUser}
                        onChange={handleEmailOutgoingUserChange}
                        placeholder="e.g., your-email@gmail.com"
                        className="bg-agentvooc-secondary-accent/50 border-agentvooc-accent/30 focus:ring-agentvooc-accent"
                      />
                    </div>
                    <div>
                      <label htmlFor="emailOutgoingPass" className="block text-sm font-medium text-agentvooc-secondary mb-1">
                        Password
                      </label>
                      <Input
                        id="emailOutgoingPass"
                        name="emailOutgoingPass"
                        type="password"
                        value={emailOutgoingPass}
                        onChange={handleEmailOutgoingPassChange}
                        placeholder="e.g., your-app-password"
                        className="bg-agentvooc-secondary-accent/50 border-agentvooc-accent/30 focus:ring-agentvooc-accent"
                      />
                      {characterData.settings.email.outgoing.service === "gmail" && (
                        <p className="text-xs text-agentvooc-secondary mt-1">
                          Use a Gmail App Password (
                          <a
                            href="https://support.google.com/mail/answer/185833?hl=en"
                            target="_blank"
                            rel="noopener noreferrer"
                            className="text-agentvooc-accent hover:underline"
                          >
                            learn more
                          </a>
                          ).
                        </p>
                      )}
                    </div>
                    <div>
                      <label htmlFor="emailIncomingHost" className="block text-sm font-medium text-agentvooc-secondary mb-1">
                        Incoming Host
                      </label>
                      <Input
            id="emailIncomingHost"
            name="emailIncomingHost"
            type="text"
            value={characterData.settings.email.incoming.host}
            onChange={(e) =>
              handleAdvancedInputChange(e, "settings", "email.incoming.host")
            }
            placeholder="e.g., imap.gmail.com"
            className="text-agentvooc-primary bg-agentvooc-secondary-accent border-agentvooc-accent/30 focus:ring-agentvooc-accent focus:border-agentvooc-accent placeholder-agentvooc-secondary/50 rounded-lg"
          />
                    </div>
                    <div>
                      <label htmlFor="emailIncomingPort" className="block text-sm font-medium text-agentvooc-secondary mb-1">
                        Incoming Port
                      </label>
                      <Input
                        id="emailIncomingPort"
                        name="emailIncomingPort"
                        type="number"
                        value={characterData.settings.email.incoming.port}
                        onChange={(e) => handleAdvancedInputChange(e, "settings", "email.incoming.port")}
                        placeholder="e.g., 993"
                        className="bg-agentvooc-secondary-accent/50 border-agentvooc-accent/30 focus:ring-agentvooc-accent"
                      />
                    </div>
                    <div>
                      <label htmlFor="emailIncomingUser" className="block text-sm font-medium text-agentvooc-secondary mb-1">
                        Incoming Username
                      </label>
                      <Input
                        id="emailIncomingUser"
                        name="emailIncomingUser"
                        type="text"
                        value={emailIncomingUser}
                        onChange={handleEmailIncomingUserChange}
                        placeholder="e.g., your-email@gmail.com"
                        className="bg-agentvooc-secondary-accent/50 border-agentvooc-accent/30 focus:ring-agentvooc-accent"
                      />
                    </div>
                    <div>
                      <label htmlFor="emailIncomingPass" className="block text-sm font-medium text-agentvooc-secondary mb-1">
                        Incoming Password
                      </label>
                      <Input
                        id="emailIncomingPass"
                        name="emailIncomingPass"
                        type="password"
                        value={emailIncomingPass}
                        onChange={handleEmailIncomingPassChange}
                        placeholder="e.g., your-app-password"
                        className="bg-agentvooc-secondary-accent/50 border-agentvooc-accent/30 focus:ring-agentvooc-accent"
                      />
                    </div>
                  </div>
                )}
              </div>

              {/* Telegram Plugin */}
              <div>
                <div className="flex items-center space-x-2 mb-2">
                  <input
                    id="enableTelegramPlugin"
                    name="enableTelegramPlugin"
                    type="checkbox"
                    checked={characterData.plugins.includes("telegram")}
                    onChange={(e) => handleTelegramCheckbox(e.target.checked)}
                    className="text-agentvooc-accent focus:ring-agentvooc-accent rounded"
                  />
                  <label htmlFor="enableTelegramPlugin" className="text-sm font-semibold text-agentvooc-secondary uppercase tracking-wider">
                    Enable Telegram Plugin
                  </label>
                </div>
                {characterData.plugins.includes("telegram") && (
                  <div className="space-y-4 p-4 bg-agentvooc-secondary-accent/20 rounded-lg">
                    <div>
                      <label htmlFor="telegramBotToken" className="block text-sm font-medium text-agentvooc-secondary mb-1">
                        Telegram Bot Token
                      </label>
                      <Input
                        id="telegramBotToken"
                        name="telegramBotToken"
                        type="text"
                        value={telegramBotToken}
                        onChange={handleTelegramBotTokenChange}
                        placeholder="e.g., 123456789:ABC-DEF1234ghIkl-zyx57W2v1u123ew11"
                        className="bg-agentvooc-secondary-accent/50 border-agentvooc-accent/30 focus:ring-agentvooc-accent"
                      />
                    </div>
                  </div>
                )}
              </div>

              {/* Twitter Plugin */}
              <div>
                <div className="flex items-center space-x-2 mb-2">
                  <input
                    id="enableTwitterPlugin"
                    name="enableTwitterPlugin"
                    type="checkbox"
                    checked={characterData.plugins.includes("twitter")}
                    onChange={(e) => handleTwitterCheckbox(e.target.checked)}
                    className="text-agentvooc-accent focus:ring-agentvooc-accent rounded"
                  />
                  <label htmlFor="enableTwitterPlugin" className="text-sm font-semibold text-agentvooc-secondary uppercase tracking-wider">
                    Enable Twitter Plugin
                  </label>
                </div>
                {characterData.plugins.includes("twitter") && (
                  <div className="space-y-4 p-4 bg-agentvooc-secondary-accent/20 rounded-lg">
                    <div>
                      <label htmlFor="twitterUsername" className="block text-sm font-medium text-agentvooc-secondary mb-1">
                        Twitter Username
                      </label>
                      <Input
                        id="twitterUsername"
                        name="twitterUsername"
                        type="text"
                        value={twitterUsername}
                        onChange={handleTwitterUsernameChange}
                        placeholder="e.g., @username"
                        className="bg-agentvooc-secondary-accent/50 border-agentvooc-accent/30 focus:ring-agentvooc-accent"
                      />
                    </div>
                    <div>
                      <label htmlFor="twitterPassword" className="block text-sm font-medium text-agentvooc-secondary mb-1">
                        Twitter Password
                      </label>
                      <Input
                        id="twitterPassword"
                        name="twitterPassword"
                        type="password"
                        value={twitterPassword}
                        onChange={handleTwitterPasswordChange}
                        placeholder="Enter your Twitter password"
                        className="bg-agentvooc-secondary-accent/50 border-agentvooc-accent/30 focus:ring-agentvooc-accent"
                      />
                    </div>
                    <div>
                      <label htmlFor="twitterEmail" className="block text-sm font-medium text-agentvooc-secondary mb-1">
                        Twitter Email
                      </label>
                      <Input
                        id="twitterEmail"
                        name="twitterEmail"
                        type="email"
                        value={twitterEmail}
                        onChange={handleTwitterEmailChange}
                        placeholder="e.g., user@example.com"
                        className="bg-agentvooc-secondary-accent/50 border-agentvooc-accent/30 focus:ring-agentvooc-accent"
                      />
                    </div>
                  </div>
                )}
              </div>
            </div>
            <div>
              <label htmlFor="plugins" className="block text-sm font-semibold text-agentvooc-secondary mb-2 uppercase tracking-wider">
                Other Plugins (comma-separated)
              </label>
              <Input
                id="plugins"
                name="plugins"
                type="text"
                value={characterData.plugins.filter((p) => !["email", "emailautomation", "telegram", "twitter"].includes(p)).join(",")}
                onChange={(e) => {
                  const newPlugins = e.target.value
                    .split(",")
                    .map((s) => s.trim())
                    .filter((s) => s);
                  const activePlugins = userQuery.data?.activePlugins || [];
                  const invalidPlugins = newPlugins.filter((p) => !activePlugins.includes(p));
                  if (invalidPlugins.length > 0) {
                    toast({
                      variant: "destructive",
                      title: "Subscription Required",
                      description: `You need a subscription for the following plugins: ${invalidPlugins.join(", ")}. Please subscribe in the settings page.`,
                      action: (
                        <Button
                          onClick={() => navigate("/settings", { state: { from: "create-character" } })}
                          className="bg-agentvooc-button-bg text-agentvooc-accent hover:bg-agentvooc-accent hover:text-agentvooc-secondary-bg"
                        >
                          Go to Settings
                        </Button>
                      ),
                    });
                    return;
                  }
                  setCharacterData((prev) => ({
                    ...prev,
                    plugins: [
                      ...prev.plugins.filter((p) =>
                        ["email", "emailautomation", "telegram", "twitter"].includes(p)
                      ),
                      ...newPlugins,
                    ],
                  }));
                }}
                placeholder="Enter plugins (e.g., solana)"
                className="bg-agentvooc-secondary-accent/50 border-agentvooc-accent/30 focus:ring-agentvooc-accent"
              />
            </div>
          </CardContent>
        </Card>

        {/* Advanced Settings Card */}
        <Card className="bg-agentvooc-secondary-bg/95 backdrop-blur-md border-2 border-agentvooc-accent/50 shadow-lg shadow-agentvooc-accent/20">
          <CardHeader>
            <div className="flex items-center space-x-3">
              <Settings className="w-6 h-6 text-agentvooc-accent" />
              <CardTitle className="text-xl font-semibold text-agentvooc-primary">
                Advanced Settings
              </CardTitle>
            </div>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label htmlFor="modelProvider" className="block text-sm font-semibold text-agentvooc-secondary mb-2 uppercase tracking-wider">
                  Model Provider
                </label>
                <select
                  id="modelProvider"
                  name="modelProvider"
                  value={characterData.modelProvider}
                  onChange={handleInputChange}
                  className="w-full p-2 rounded-lg bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-agentvooc-accent"
                >
                  <option value="OPENAI">OPENAI</option>
                  <option value="OLLAMA">OLLAMA</option>
                  <option value="CUSTOM">CUSTOM</option>
                </select>
              </div>
              <div>
                <label htmlFor="voiceModel" className="block text-sm font-semibold text-agentvooc-secondary mb-2 uppercase tracking-wider">
                  Voice Model
                </label>
                <Input
                  id="voiceModel"
                  name="voiceModel"
                  type="text"
                  value={characterData.settings.voice.model}
                  onChange={(e) => handleAdvancedInputChange(e, "settings", "voiceModel")}
                  placeholder="Enter voice model (e.g., en_US-hfc_female-medium)"
                  className="bg-agentvooc-secondary-accent/50 border-agentvooc-accent/30 focus:ring-agentvooc-accent"
                />
              </div>
            </div>
            <div>
              <label htmlFor="ragKnowledge" className="block text-sm font-semibold text-agentvooc-secondary mb-2 uppercase tracking-wider">
                Enable RAG Knowledge
              </label>
              <select
                id="ragKnowledge"
                name="ragKnowledge"
                value={characterData.settings.ragKnowledge.toString()}
                onChange={(e) => handleAdvancedInputChange(e, "settings", "ragKnowledge")}
                className="w-full p-2 rounded-lg bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-agentvooc-accent"
              >
                <option value="true">Yes</option>
                <option value="false">No</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-semibold text-agentvooc-secondary mb-2 uppercase tracking-wider">
                Secrets
              </label>
              {secretsError && (
                <p className="text-red-500 text-sm mb-2">{secretsError}</p>
              )}
              {secrets.map((secret, index) => (
                <div key={index} className="flex items-center space-x-2 mb-2">
                  <Input
                    type="text"
                    placeholder="Key (e.g., EMAIL_OUTGOING_USER)"
                    value={secret.key}
                    onChange={(e) => handleSecretChange(index, "key", e.target.value)}
                    className="bg-agentvooc-secondary-accent/50 border-agentvooc-accent/30 focus:ring-agentvooc-accent w-1/2"
                    disabled={secret.key === "TELEGRAM_BOT_TOKEN"}
                  />
                  <Input
                    type="text"
                    placeholder="Value (e.g., your-email@gmail.com)"
                    value={secret.value}
                    onChange={(e) => handleSecretChange(index, "value", e.target.value)}
                    className="bg-agentvooc-secondary-accent/50 border-agentvooc-accent/30 focus:ring-agentvooc-accent w-1/2"
                    disabled={secret.key === "TELEGRAM_BOT_TOKEN"}
                  />
                  <Button
                    type="button"
                    variant="destructive"
                    onClick={() => removeSecret(index)}
                    disabled={secrets.length === 1 || secret.key === "TELEGRAM_BOT_TOKEN"}
                    className="bg-red-500 hover:bg-red-600"
                  >
                    Remove
                  </Button>
                </div>
              ))}
              <Button
                type="button"
                onClick={addSecret}
                className="mt-2 bg-agentvooc-button-bg text-agentvooc-accent hover:bg-agentvooc-accent hover:text-agentvooc-secondary-bg"
              >
                Add Secret
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Action Buttons */}
        <div className="flex justify-end gap-4">
          <Button
            type="submit"
            className="bg-gradient-to-r from-agentvooc-accent to-agentvooc-button-bg text-agentvooc-secondary-bg hover:bg-agentvooc-accent shadow-lg"
            disabled={createCharacterMutation.isPending || uploadImageMutation.isPending}
          >
            {createCharacterMutation.isPending || uploadImageMutation.isPending ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Creating...
              </>
            ) : (
              "Create Character"
            )}
          </Button>
          <Button
            type="button"
            variant="outline"
            onClick={handleCancel}
            className="border-agentvooc-accent/30 text-agentvooc-primary hover:bg-agentvooc-accent/10"
          >
            Cancel
          </Button>
        </div>
      </form>
    </div>
  </div>
);
}