// client/src/components/create-character.tsx
import { useCallback, useEffect, useState,  } from "react";
import { v4 as uuidv4 } from "uuid";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { useNavigate,  } from "react-router-dom";
import { apiClient } from "@/lib/api";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Loader2 } from "lucide-react";
import { toast } from "@/hooks/use-toast";
import type { UUID } from "@elizaos/core";
import { useQuery } from "@tanstack/react-query";
import { Card } from "@/components/ui/card";
import { Accordion } from "@/components/ui/accordion";
import { Tooltip } from "@/components/ui/tooltip";
import {
  User,
  AtSign,
  Camera,
  MessageCircle,
  BookOpen,
  Scroll,
  Tag,
  Star,
  PenTool,
  MessageSquare,
  Send,
  Code,
  Book,
  Plug,
  Settings,
  Eye,
  Check,
  X,
  Sliders,
  Mail,
  Server,
  Hash,
  Lock,
  Key,
  Trash2,
  Plus,
  AlertCircle,
  Cpu,
  Mic,
  Database,
  Heart,
} from "lucide-react";

// Debounce utility
function debounce<T extends (...args: any[]) => void>(func: T, wait: number): (...args: Parameters<T>) => void {
  let timeout: NodeJS.Timeout | null = null;
  return (...args: Parameters<T>) => {
    if (timeout) clearTimeout(timeout);
    timeout = setTimeout(() => func(...args), wait);
  };
}
interface CreateCharacterProps {
  setError: React.Dispatch<React.SetStateAction<string | null>>;
}


export default function CreateCharacter({ setError }: CreateCharacterProps) {
  const navigate = useNavigate();
  const queryClient = useQueryClient();
  const [secrets, setSecrets] = useState<{ key: string; value: string }[]>([{ key: "", value: "" }]);
  const [secretsError, setSecretsError] = useState<string | null>(null);
  const [profileImage, setProfileImage] = useState<File | null>(null);
  const [imagePreview, setImagePreview] = useState<string | null>(null);
  const [telegramBotToken, setTelegramBotToken] = useState("");
  const [twitterUsername, setTwitterUsername] = useState("");
  const [twitterPassword, setTwitterPassword] = useState("");
  const [twitterEmail, setTwitterEmail] = useState("");
  const [messageExamplesError, setMessageExamplesError] = useState<string | null>(null);
  const [emailOutgoingUser, setEmailOutgoingUser] = useState("");
  const [emailOutgoingPass, setEmailOutgoingPass] = useState("");
  const [emailIncomingUser, setEmailIncomingUser] = useState("");
  const [emailIncomingPass, setEmailIncomingPass] = useState("");
  const [selectedPreset, setSelectedPreset] = useState<string | null>(null);
  // Predefined traits
 



 // Initialize characterData state with empty fields
  const [characterData, setCharacterData] = useState({
    id: uuidv4() as UUID,
    name: "",
    username: "",
    system: "",
    bio: [] as string[],
    lore: [] as string[],
    messageExamples: [] as any[],
    postExamples: [] as string[],
    topics: [] as string[],
    adjectives: [] as string[],
    modelProvider: "OPENAI" as "OPENAI" | "OLLAMA" | "CUSTOM" | undefined,
    plugins: [] as string[],
    settings: {
      secrets: { dynamic: [] as { key: string; value: string }[] },
      voice: { model: "" },
      ragKnowledge: false,
      email: {
        outgoing: {
          service: "gmail" as "smtp" | "gmail",
          host: "",
          port: 0,
          secure: false,
          user: "",
          pass: "",
        },
        incoming: {
          service: "imap" as "imap",
          host: "",
          port: 993,
          user: "",
          pass: "",
        },
      },
    },
    style: {
      all: [] as string[],
      chat: [] as string[],
      post: [] as string[],
    },
    knowledge: [] as any[],
  });


   const [bioInput, setBioInput] = useState("");
  const [loreInput, setLoreInput] = useState("");
  const [messageExamplesInput, setMessageExamplesInput] = useState("[]");
  const [postExamplesInput, setPostExamplesInput] = useState("");
  const [topicsInput, setTopicsInput] = useState("");
  const [adjectivesInput, setAdjectivesInput] = useState("");
  const [styleAllInput, setStyleAllInput] = useState("");
  const [styleChatInput, setStyleChatInput] = useState("");
  const [stylePostInput, setStylePostInput] = useState("");
  

    // Fetch character presets
  const presetsQuery = useQuery({
    queryKey: ["characterPresets"],
    queryFn: async () => {
      const response = await apiClient.getCharacterPresets();
      console.log("[CREATE_CHARACTER] characterPresets response:", response);
      return response.characterPresets;
    },
  });

 // Fetch user data from Sanity
  const userQuery = useQuery({
    queryKey: ["user"],
    queryFn: async () => {
      const response = await apiClient.getUser();
      console.log("[CREATE_CHARACTER] userQuery response:", response);
      return response.user;
    },
  });

 // Handle preset selection
  const handlePresetSelect = (preset: any | null) => {
    setSelectedPreset(preset?._id || null);
    if (!preset) {
      // Reset to "Create Your Own" with empty fields
      setCharacterData({
        id: uuidv4() as UUID,
        name: "",
        username: "",
        system: "",
        bio: [],
        lore: [],
        messageExamples: [],
        postExamples: [],
        topics: [],
        adjectives: [],
        modelProvider: "OPENAI",
        plugins: [],
        settings: {
          secrets: { dynamic: [] },
          voice: { model: "" },
          ragKnowledge: false,
          email: {
            outgoing: { service: "gmail", host: "", port: 0, secure: false, user: "", pass: "" },
            incoming: { service: "imap", host: "", port: 993, user: "", pass: "" },
          },
        },
        style: {
          all: [],
          chat: [],
          post: [],
        },
        knowledge: [],
      });
      setBioInput("");
      setLoreInput("");
      setMessageExamplesInput("[]");
      setPostExamplesInput("");
      setTopicsInput("");
      setAdjectivesInput("");
      setStyleAllInput("");
      setStyleChatInput("");
      setStylePostInput("");
      setSecrets([{ key: "", value: "" }]);
      setProfileImage(null);
      setImagePreview(null);
      setTelegramBotToken("");
      setTwitterUsername("");
      setTwitterPassword("");
      setTwitterEmail("");
      setEmailOutgoingUser("");
      setEmailOutgoingPass("");
      setEmailIncomingUser("");
      setEmailIncomingPass("");
    } else {
      // Load preset data
      setCharacterData({
        id: uuidv4() as UUID,
        name: preset.name || "",
        username: preset.username || "",
        system: preset.system || "",
        bio: preset.bio || [],
        lore: preset.lore || [],
        messageExamples: preset.messageExamples?.map((msg: any) => msg.conversation) || [],
        postExamples: preset.postExamples || [],
        topics: preset.topics || [],
        adjectives: preset.adjectives || [],
        modelProvider: preset.modelProvider || "OPENAI",
        plugins: preset.plugins || [],
        settings: {
          secrets: preset.settings?.secrets?.dynamic ? { dynamic: preset.settings.secrets.dynamic } : { dynamic: [] },
          voice: preset.settings?.voice || { model: "" },
          ragKnowledge: preset.settings?.ragKnowledge || false,
          email: {
            outgoing: preset.settings?.email?.outgoing || { service: "gmail", host: "", port: 0, secure: false, user: "", pass: "" },
            incoming: preset.settings?.email?.incoming || { service: "imap", host: "", port: 993, user: "", pass: "" },
          },
        },
        style: {
          all: preset.style?.all || [],
          chat: preset.style?.chat || [],
          post: preset.style?.post || [],
        },
        knowledge: preset.knowledge || [],
      });
      setBioInput(preset.bio?.join(",\n\n") || "");
      setLoreInput(preset.lore?.join(",\n") || "");
      setMessageExamplesInput(
        JSON.stringify(preset.messageExamples?.map((msg: any) => msg.conversation) || [], null, 2)
      );
      setPostExamplesInput(preset.postExamples?.join(",\n") || "");
      setTopicsInput(preset.topics?.join(",\n") || "");
      setAdjectivesInput(preset.adjectives?.join(",\n") || "");
      setStyleAllInput(preset.style?.all?.join(",\n") || "");
      setStyleChatInput(preset.style?.chat?.join(",\n") || "");
      setStylePostInput(preset.style?.post?.join(",\n") || "");
      setSecrets(preset.settings?.secrets?.dynamic || [{ key: "", value: "" }]);
      setEmailOutgoingUser(preset.settings?.email?.outgoing?.user || "");
      setEmailOutgoingPass(preset.settings?.email?.outgoing?.pass || "");
      setEmailIncomingUser(preset.settings?.email?.incoming?.user || "");
      setEmailIncomingPass(preset.settings?.email?.incoming?.pass || "");
    }
  };
useEffect(() => {
    setCharacterData((prev) => {
      let parsedMessageExamples = prev.messageExamples;
      let jsonError: string | null = null;

      if (messageExamplesInput) {
        try {
          parsedMessageExamples = JSON.parse(messageExamplesInput);
          if (!Array.isArray(parsedMessageExamples) || !parsedMessageExamples.every(Array.isArray)) {
            jsonError = "Message Examples must be an array of arrays";
            setMessageExamplesError(jsonError);
            parsedMessageExamples = [];
          } else {
            const isValid = parsedMessageExamples.every((example) =>
              example.every(
                (msg) =>
                  msg &&
                  typeof msg === "object" &&
                  "user" in msg &&
                  "content" in msg &&
                  msg.content &&
                  typeof msg.content === "object" &&
                  "text" in msg.content
              )
            );
            if (!isValid) {
              jsonError = "Each message example must contain objects with 'user' and 'content' properties, where 'content' has a 'text' property";
              setMessageExamplesError(jsonError);
              parsedMessageExamples = [];
            } else {
              setMessageExamplesError(null);
            }
          }
        } catch (error) {
          jsonError = "Invalid JSON format in Message Examples";
          setMessageExamplesError(jsonError);
          parsedMessageExamples = [];
        }
      } else {
        parsedMessageExamples = [];
        setMessageExamplesError(null);
      }

      return {
        ...prev,
        bio: bioInput ? bioInput.split(/,\s*\n/).map((s) => s.trim()).filter((s) => s) : [],
        lore: loreInput ? loreInput.split(/,\s*\n/).map((s) => s.trim()).filter((s) => s) : [],
        messageExamples: parsedMessageExamples,
        postExamples: postExamplesInput ? postExamplesInput.split(/,\s*\n/).map((s) => s.trim()).filter((s) => s) : [],
        topics: topicsInput ? topicsInput.split(/,\s*\n/).map((s) => s.trim()).filter((s) => s) : [],
        adjectives: adjectivesInput ? adjectivesInput.split(/,\s*\n/).map((s) => s.trim()).filter((s) => s) : [],
        style: {
          all: styleAllInput ? styleAllInput.split(/,\s*\n/).map((s) => s.trim()).filter((s) => s) : [],
          chat: styleChatInput ? styleChatInput.split(/,\s*\n/).map((s) => s.trim()).filter((s) => s) : [],
          post: stylePostInput ? stylePostInput.split(/,\s*\n/).map((s) => s.trim()).filter((s) => s) : [],
        },
        settings: {
          ...prev.settings,
          email: {
            ...prev.settings.email,
            outgoing: {
              ...prev.settings.email.outgoing,
              user: emailOutgoingUser,
              pass: emailOutgoingPass,
            },
            incoming: {
              ...prev.settings.email.incoming,
              user: emailIncomingUser,
              pass: emailIncomingPass,
            },
          },
        },
      };
    });
  }, [
    bioInput,
    loreInput,
    messageExamplesInput,
    postExamplesInput,
    topicsInput,
    adjectivesInput,
    styleAllInput,
    styleChatInput,
    stylePostInput,
    emailOutgoingUser,
    emailOutgoingPass,
    emailIncomingUser,
    emailIncomingPass,
  ]);

  const handlePluginChange = async (plugin: string, checked: boolean) => {
    let activePlugins = userQuery.data?.activePlugins || [];
    console.log("[CREATE_CHARACTER] handlePluginChange:", {
      plugin,
      checked,
      activePlugins,
      userQueryStatus: userQuery.status,
      userQueryError: userQuery.error,
    });

    // Fallback: Fetch subscription items if plugin not in activePlugins
  if (!activePlugins.includes(plugin) && checked) {
    try {
      console.log("[CREATE_CHARACTER] Plugin not in activePlugins, fetching subscription items");
      const subscriptionData = await apiClient.getSubscriptionItems({ includeDetails: true });
      activePlugins = subscriptionData.plugins || [];
      console.log("[CREATE_CHARACTER] Fetched subscription items, activePlugins:", activePlugins);

      if (!activePlugins.includes(plugin)) {
        toast({
          variant: "destructive",
          title: "Subscription Required",
          description: `You need a subscription for the ${plugin} plugin. Please subscribe in the settings page.`,
          action: (
            <Button
              onClick={() => navigate("/settings", { state: { from: "create-character" } })}
              className="bg-agentvooc-button-bg text-agentvooc-accent hover:bg-agentvooc-accent hover:text-agentvooc-secondary-bg"
            >
              Go to Settings
            </Button>
          ),
        });
        return;
      }
    } catch (error) {
      console.error("[CREATE_CHARACTER] Error fetching subscription items:", error);
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to verify plugin subscription. Please try again.",
      });
      return;
    }
  }

 
      // Sync characterData with bioInput and loreInput
 

    setCharacterData((prev) => ({
      ...prev,
      plugins: checked
        ? [...prev.plugins, plugin]
        : prev.plugins.filter((p) => p !== plugin),
    }));
  };
  

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>
  ) => {
    const { name, value } = e.target;
    setCharacterData((prev) => ({ ...prev, [name]: value }));
  };

  const debouncedSetMessageExamplesInput = useCallback(
  debounce((value: string) => {
    setMessageExamplesInput(value);
  }, 300),
  []
);

const handleArrayInputChange = (
  e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,
  field: string
) => {
  const value = e.target.value;
  if (field === "bio") {
    setBioInput(value);
  } else if (field === "lore") {
    setLoreInput(value);
  } else if (field === "messageExamples") {
    debouncedSetMessageExamplesInput(value);
  } else if (field === "postExamples") {
    setPostExamplesInput(value);
  } else if (field === "topics") {
    setTopicsInput(value);
  } else if (field === "adjectives") {
    setAdjectivesInput(value);
  } else if (field === "styleAll") {
    setStyleAllInput(value);
  } else if (field === "styleChat") {
    setStyleChatInput(value);
  } else if (field === "stylePost") {
    setStylePostInput(value);
  }
};

  const handleAdvancedInputChange = (
    e: React.ChangeEvent<
      HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
    >,
    field: string,
    subfield?: string
  ) => {
    const value = e.target.value;
    setCharacterData((prev) => {
      if (field === "settings" && subfield) {
        if (subfield === "voiceModel") {
          return {
            ...prev,
            settings: {
              ...prev.settings,
              voice: { model: value },
            },
          };
        }
        if (subfield === "ragKnowledge") {
          return {
            ...prev,
            settings: {
              ...prev.settings,
              ragKnowledge: value === "true",
            },
          };
        }
        if (subfield.startsWith("email.outgoing.")) {
          const key = subfield.split(".")[2];
          return {
            ...prev,
            settings: {
              ...prev.settings,
              email: {
                ...prev.settings.email,
                outgoing: {
                  ...prev.settings.email.outgoing,
                  [key]: key === "port" ? Number(value) : key === "secure" ? value === "true" : value,
                },
              },
            },
          };
        }
        if (subfield.startsWith("email.incoming.")) {
          const key = subfield.split(".")[2];
          return {
            ...prev,
            settings: {
              ...prev.settings,
              email: {
                ...prev.settings.email,
                incoming: {
                  ...prev.settings.email.incoming,
                  [key]: key === "port" ? Number(value) : value,
                },
              },
            },
          };
        }
        return prev;
      }
      if (field === "style" && subfield) {
        return {
          ...prev,
          style: {
            ...prev.style,
            [subfield]: value.split(",").map((s) => s.trim()).filter((s) => s),
          },
        };
      }
      if (field === "plugins") {
        return {
          ...prev,
          plugins: value.split(",").map((s) => s.trim()).filter((s) => s),
        };
      }
      return {
        ...prev,
        [field]: value,
      };
    });
  };



  // New handleEmailCheckbox function
const handleEmailCheckbox = (checked: boolean) => {
  handlePluginChange("email", checked);
  if (!checked) {
    setSecrets((prev) =>
      prev.filter(
        (s) =>
          ![
            "EMAIL_OUTGOING_USER",
            "EMAIL_OUTGOING_PASS",
            "EMAIL_INCOMING_USER",
            "EMAIL_INCOMING_PASS",
          ].includes(s.key)
      )
    );
    setEmailOutgoingUser("");
    setEmailOutgoingPass("");
    setEmailIncomingUser("");
    setEmailIncomingPass("");
    setCharacterData((prev) => ({
      ...prev,
      settings: {
        ...prev.settings,
        email: {
          outgoing: { service: "gmail", host: "", port: 0, secure: false, user: "", pass: "" },
          incoming: { service: "imap", host: "", port: 993, user: "", pass: "" },
        },
      },
    }));
  } else if (userQuery.data?.activePlugins.includes("email")) {
    const newSecrets = [
      { key: "EMAIL_OUTGOING_USER", value: emailOutgoingUser },
      { key: "EMAIL_OUTGOING_PASS", value: emailOutgoingPass },
      { key: "EMAIL_INCOMING_USER", value: emailIncomingUser },
      { key: "EMAIL_INCOMING_PASS", value: emailIncomingPass },
    ].filter((s) => s.value);
    
    setSecrets((prev) => {
      const filteredSecrets = prev.filter(
        (s) =>
          ![
            "EMAIL_OUTGOING_USER",
            "EMAIL_OUTGOING_PASS",
            "EMAIL_INCOMING_USER",
            "EMAIL_INCOMING_PASS",
          ].includes(s.key)
      );
      return [...filteredSecrets, ...newSecrets];
    });
  }
};

// New handlers for email input fields (to sync with secrets)
const handleEmailOutgoingUserChange = (e: React.ChangeEvent<HTMLInputElement>) => {
  const value = e.target.value;
  setEmailOutgoingUser(value);
  setSecrets((prev) => {
    const newSecrets = prev.filter((s) => s.key !== "EMAIL_OUTGOING_USER");
    if (value) {
      newSecrets.push({ key: "EMAIL_OUTGOING_USER", value });
    }
    return newSecrets;
  });
  setCharacterData((prev) => ({
    ...prev,
    settings: {
      ...prev.settings,
      email: {
        ...prev.settings.email,
        outgoing: { ...prev.settings.email.outgoing, user: value },
      },
    },
  }));
};

const handleEmailOutgoingPassChange = (e: React.ChangeEvent<HTMLInputElement>) => {
  const value = e.target.value;
  setEmailOutgoingPass(value);
  setSecrets((prev) => {
    const newSecrets = prev.filter((s) => s.key !== "EMAIL_OUTGOING_PASS");
    if (value) {
      newSecrets.push({ key: "EMAIL_OUTGOING_PASS", value });
    }
    return newSecrets;
  });
  setCharacterData((prev) => ({
    ...prev,
    settings: {
      ...prev.settings,
      email: {
        ...prev.settings.email,
        outgoing: { ...prev.settings.email.outgoing, pass: value },
      },
    },
  }));
};

const handleEmailIncomingUserChange = (e: React.ChangeEvent<HTMLInputElement>) => {
  const value = e.target.value;
  setEmailIncomingUser(value);
  setSecrets((prev) => {
    const newSecrets = prev.filter((s) => s.key !== "EMAIL_INCOMING_USER");
    if (value) {
      newSecrets.push({ key: "EMAIL_INCOMING_USER", value });
    }
    return newSecrets;
  });
  setCharacterData((prev) => ({
    ...prev,
    settings: {
      ...prev.settings,
      email: {
        ...prev.settings.email,
        incoming: { ...prev.settings.email.incoming, user: value },
      },
    },
  }));
};

const handleEmailIncomingPassChange = (e: React.ChangeEvent<HTMLInputElement>) => {
  const value = e.target.value;
  setEmailIncomingPass(value);
  setSecrets((prev) => {
    const newSecrets = prev.filter((s) => s.key !== "EMAIL_INCOMING_PASS");
    if (value) {
      newSecrets.push({ key: "EMAIL_INCOMING_PASS", value });
    }
    return newSecrets;
  });
  setCharacterData((prev) => ({
    ...prev,
    settings: {
      ...prev.settings,
      email: {
        ...prev.settings.email,
        incoming: { ...prev.settings.email.incoming, pass: value },
      },
    },
  }));
};



  const handleTelegramCheckbox = (checked: boolean) => {
    handlePluginChange("telegram", checked);
    if (!checked) {
      setSecrets((prev) => prev.filter((s) => s.key !== "TELEGRAM_BOT_TOKEN"));
      setTelegramBotToken("");
    } else if (userQuery.data?.activePlugins.includes("telegram")) {
      setSecrets((prev) => {
        if (!prev.some((s) => s.key === "TELEGRAM_BOT_TOKEN")) {
          return [...prev, { key: "TELEGRAM_BOT_TOKEN", value: telegramBotToken }];
        }
        return prev;
      });
    }
  };

  const handleTelegramBotTokenChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setTelegramBotToken(value);
    setSecrets((prev) => {
      const newSecrets = prev.filter((s) => s.key !== "TELEGRAM_BOT_TOKEN");
      if (value) {
        newSecrets.push({ key: "TELEGRAM_BOT_TOKEN", value });
      }
      return newSecrets;
    });
  };

  const handleTwitterCheckbox = (checked: boolean) => {
    handlePluginChange("twitter", checked);
    if (!checked) {
      setSecrets((prev) =>
        prev.filter(
          (s) => !["TWITTER_USERNAME", "TWITTER_PASSWORD", "TWITTER_EMAIL"].includes(s.key)
        )
      );
      setTwitterUsername("");
      setTwitterPassword("");
      setTwitterEmail("");
    } else if (userQuery.data?.activePlugins.includes("twitter")) {
      setSecrets((prev) => {
        const newSecrets = prev.filter(
          (s) => !["TWITTER_USERNAME", "TWITTER_PASSWORD", "TWITTER_EMAIL"].includes(s.key)
        );
        return [
          ...newSecrets,
          { key: "TWITTER_USERNAME", value: twitterUsername },
          { key: "TWITTER_PASSWORD", value: twitterPassword },
          { key: "TWITTER_EMAIL", value: twitterEmail },
        ].filter((s) => s.value);
      });
    }
  };

  const handleTwitterUsernameChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setTwitterUsername(value);
    setSecrets((prev) => {
      const newSecrets = prev.filter((s) => s.key !== "TWITTER_USERNAME");
      if (value) {
        newSecrets.push({ key: "TWITTER_USERNAME", value });
      }
      return newSecrets;
    });
  };

  const handleTwitterPasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setTwitterPassword(value);
    setSecrets((prev) => {
      const newSecrets = prev.filter((s) => s.key !== "TWITTER_PASSWORD");
      if (value) {
        newSecrets.push({ key: "TWITTER_PASSWORD", value });
      }
      return newSecrets;
    });
  };

  const handleTwitterEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setTwitterEmail(value);
    setSecrets((prev) => {
      const newSecrets = prev.filter((s) => s.key !== "TWITTER_EMAIL");
      if (value) {
        newSecrets.push({ key: "TWITTER_EMAIL", value });
      }
      return newSecrets;
    });
  };

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      if (!["image/jpeg", "image/png", "image/gif"].includes(file.type)) {
        setError("Invalid file type. Only JPEG, PNG, and GIF are allowed.");
        toast({
          variant: "destructive",
          title: "Error",
          description: "Invalid file type. Only JPEG, PNG, and GIF are allowed.",
        });
        return;
      }
      setProfileImage(file);
      const reader = new FileReader();
      reader.onload = () => {
        setImagePreview(reader.result as string);
      };
      reader.readAsDataURL(file);
      setError(null);
    }
  };

  const handleSecretChange = (
    index: number,
    field: "key" | "value",
    value: string
  ) => {
    setSecrets((prev) => {
      const newSecrets = [...prev];
      newSecrets[index] = { ...newSecrets[index], [field]: value };
      return newSecrets;
    });
    setSecretsError(null);
  };

  const addSecret = () => {
    setSecrets((prev) => [...prev, { key: "", value: "" }]);
  };

  const removeSecret = (index: number) => {
    setSecrets((prev) => prev.filter((_, i) => i !== index));
  };

  const uploadImageMutation = useMutation({
    mutationFn: async ({ characterId, file }: { characterId: UUID; file: File }) => {
      console.log("[CREATE_CHARACTER] Uploading profile image for characterId:", characterId);
      const formData = new FormData();
      formData.append("image", file);
      const response = await apiClient.uploadCharacterProfileImage(characterId, formData);
      console.log("[CREATE_CHARACTER] Image upload response:", response);
      return response;
    },
    onSuccess: (response) => {
      console.log("[CREATE_CHARACTER] Profile image uploaded successfully, URL:", response.url);
      toast({
        title: "Success",
        description: "Profile image uploaded successfully.",
      });
      queryClient.invalidateQueries({ queryKey: ["characters"] });
    },
    onError: (error: any) => {
      console.error("[CREATE_CHARACTER] Image upload error:", error);
      setError("Failed to upload image: " + (error.message || "Unknown error"));
      toast({
        variant: "destructive",
        title: "Error",
        description: error.message || "Failed to upload image.",
      });
      if (error.status === 401 && window.location.pathname !== "/auth") {
        console.log("[CREATE_CHARACTER] 401 error, redirecting to /auth");
        navigate("/auth");
      }
    },
  });

  const createCharacterMutation = useMutation({
  mutationFn: async () => {
    const validSecrets = secrets.filter(
      (secret) => secret.key.trim() && secret.value.trim()
    );
    
    // Validate email settings if email plugin is enabled
    if (characterData.plugins.includes("email") || characterData.plugins.includes("emailautomation")) {
      if (
        !emailOutgoingUser ||
        !emailOutgoingPass ||
        !emailIncomingUser ||
        !emailIncomingPass
      ) {
        throw new Error("All email fields (username and password for both outgoing and incoming) are required when email plugin is enabled.");
      }
      if (characterData.settings.email.outgoing.service === "smtp" && (!characterData.settings.email.outgoing.host || !characterData.settings.email.outgoing.port)) {
        throw new Error("SMTP host and port are required when using SMTP service.");
      }
    }

    // Validate messageExamples JSON
      let parsedMessageExamples;
      try {
        parsedMessageExamples = messageExamplesInput ? JSON.parse(messageExamplesInput) : [];
        if (!Array.isArray(parsedMessageExamples) || !parsedMessageExamples.every(Array.isArray)) {
          throw new Error("Message Examples must be an array of arrays");
        }
        const isValid = parsedMessageExamples.every((example) =>
          example.every(
            (msg) =>
              msg &&
              typeof msg === "object" &&
              "user" in msg &&
              "content" in msg &&
              msg.content &&
              typeof msg.content === "object" &&
              "text" in msg.content
          )
        );
        if (!isValid) {
          throw new Error("Each message example must contain objects with 'user' and 'content' properties, where 'content' has a 'text' property");
        }
      } catch (error) {
        throw new Error(
          "Invalid JSON format in Message Examples: " +
            (error instanceof Error ? error.message : String(error))
        );
      }

     const updatedCharacterData = {
        id: characterData.id,
        name: characterData.name,
        username: characterData.username || undefined,
        system: characterData.system || undefined,
        bio: bioInput ? bioInput.split(/,\s*\n/).map((s) => s.trim()).filter((s) => s) : [],
        lore: loreInput ? loreInput.split(/,\s*\n/).map((s) => s.trim()).filter((s) => s) : [],
        messageExamples: parsedMessageExamples,
        postExamples: postExamplesInput ? postExamplesInput.split(/,\s*\n/).map((s) => s.trim()).filter((s) => s) : [],
        topics: topicsInput ? topicsInput.split(/,\s*\n/).map((s) => s.trim()).filter((s) => s) : [],
        adjectives: adjectivesInput ? adjectivesInput.split(/,\s*\n/).map((s) => s.trim()).filter((s) => s) : [],
        modelProvider: characterData.modelProvider || "OPENAI",
        plugins: characterData.plugins || [],
        knowledge: characterData.knowledge || [],
        settings: {
          secrets: validSecrets.length ? { dynamic: validSecrets } : undefined,
          voice: characterData.settings.voice.model ? characterData.settings.voice : undefined,
          ragKnowledge: characterData.settings.ragKnowledge,
          email: characterData.plugins.some((p) => ["email", "emailautomation"].includes(p))
            ? {
                outgoing: {
                  ...characterData.settings.email.outgoing,
                  user: emailOutgoingUser,
                  pass: emailOutgoingPass,
                },
                incoming: {
                  ...characterData.settings.email.incoming,
                  user: emailIncomingUser,
                  pass: emailIncomingPass,
                },
              }
            : undefined,
        },
        style: {
          all: styleAllInput ? styleAllInput.split(/,\s*\n/).map((s) => s.trim()).filter((s) => s) : [],
          chat: styleChatInput ? styleChatInput.split(/,\s*\n/).map((s) => s.trim()).filter((s) => s) : [],
          post: stylePostInput ? stylePostInput.split(/,\s*\n/).map((s) => s.trim()).filter((s) => s) : [],
        },
      };


    console.log("[CREATE_CHARACTER] Creating character with payload:", JSON.stringify(updatedCharacterData, null, 2));
    const createResponse = await apiClient.createCharacter(updatedCharacterData);
    console.log("[CREATE_CHARACTER] Create character response:", createResponse);

    if (profileImage) {
      await uploadImageMutation.mutateAsync({ characterId: characterData.id, file: profileImage });
      console.log("[CREATE_CHARACTER] Profile image upload initiated");
    }

    return characterData.id;
  },

  onSuccess: (characterId) => {
      console.log("[CREATE_CHARACTER] Character created successfully, ID:", characterId);
      queryClient.invalidateQueries({ queryKey: ["characters"] });
      toast({
        title: "Success",
        description: `Character "${characterData.name}" created successfully.`,
      });
      // Reset form to empty fields
      setCharacterData({
        id: uuidv4() as UUID,
        name: "",
        username: "",
        system: "",
        bio: [],
        lore: [],
        messageExamples: [],
        postExamples: [],
        topics: [],
        adjectives: [],
        modelProvider: "OPENAI",
        plugins: [],
        settings: {
          secrets: { dynamic: [] },
          voice: { model: "" },
          ragKnowledge: false,
          email: {
            outgoing: { service: "gmail", host: "", port: 0, secure: false, user: "", pass: "" },
            incoming: { service: "imap", host: "", port: 993, user: "", pass: "" },
          },
        },
        style: {
          all: [],
          chat: [],
          post: [],
        },
        knowledge: [],
      });
      setBioInput("");
      setLoreInput("");
      setMessageExamplesInput("[]");
      setPostExamplesInput("");
      setTopicsInput("");
      setAdjectivesInput("");
      setStyleAllInput("");
      setStyleChatInput("");
      setStylePostInput("");
      setSecrets([{ key: "", value: "" }]);
      setProfileImage(null);
      setImagePreview(null);
      setError(null);
      setSecretsError(null);
      setTelegramBotToken("");
      setTwitterUsername("");
      setTwitterPassword("");
      setTwitterEmail("");
      setEmailOutgoingUser("");
      setEmailOutgoingPass("");
      setEmailIncomingUser("");
      setEmailIncomingPass("");
      setSelectedPreset(null);
      navigate("/home");
    },
  onError: (error: any) => {
      console.error("[CREATE_CHARACTER] Character creation error:", error);
      const errorMessage = error.message || "Failed to create character";
      if (errorMessage.includes("Duplicate keys found in secrets")) {
        setSecretsError(errorMessage);
      } else {
        setError(errorMessage);
      }
      toast({
        variant: "destructive",
        title: "Error",
        description: errorMessage,
      });
      if (error.status === 401 && window.location.pathname !== "/auth") {
        console.log("[CREATE_CHARACTER] 401 error, redirecting to /auth");
        navigate("/auth");
      }
    },
  });

  const handleSubmit = (e: React.FormEvent) => {
  e.preventDefault();
  if (!characterData.name) {
    setError("Character name is required.");
    toast({
      variant: "destructive",
      title: "Error",
      description: "Character name is required.",
    });
    return;
  }
  const secretKeys = secrets.map((s) => s.key.trim()).filter((k) => k);
  if (new Set(secretKeys).size !== secretKeys.length) {
    setSecretsError("Invalid key: Duplicate keys found in secrets");
    toast({
      variant: "destructive",
      title: "Error",
      description: "Duplicate keys found in secrets",
    });
    return;
  }
  if (characterData.plugins.includes("email") || characterData.plugins.includes("emailautomation")) {
    if (
      !emailOutgoingUser ||
      !emailOutgoingPass ||
      !emailIncomingUser ||
      !emailIncomingPass
    ) {
      setError("All email fields (username and password for both outgoing and incoming) are required.");
      toast({
        variant: "destructive",
        title: "Error",
        description: "All email fields (username and password for both outgoing and incoming) are required.",
      });
      return;
    }
    if (
      characterData.settings.email.outgoing.service === "smtp" &&
      (!characterData.settings.email.outgoing.host || !characterData.settings.email.outgoing.port)
    ) {
      setError("SMTP host and port are required when using SMTP service.");
      toast({
        variant: "destructive",
        title: "Error",
        description: "SMTP host and port are required when using SMTP service.",
      });
      return;
    }
  }
  try {
    if (messageExamplesInput) {
      JSON.parse(messageExamplesInput);
    }
  } catch (error) {
    setError("Invalid JSON format in Message Examples");
    toast({
      variant: "destructive",
      title: "Error",
      description: "Invalid JSON format in Message Examples. Please check the syntax.",
    });
    return;
  }
  console.log("[CREATE_CHARACTER] Submitting character creation form");
  createCharacterMutation.mutate();
};

  const handleCancel = () => {
    console.log("[CREATE_CHARACTER] Canceling character creation");
    navigate("/home");
  };













  // Character counter for text inputs
const getCharacterCount = (text: string) => text.length;

// Form completion progress
const calculateFormProgress = () => {
  const fields = [
    characterData.name,
    characterData.username,
    characterData.system,
    bioInput,
    loreInput,
    messageExamplesInput,
    postExamplesInput,
    topicsInput,
    adjectivesInput,
    styleAllInput,
    styleChatInput,
    stylePostInput,
    characterData.modelProvider,
    characterData.settings.voice.model,
    characterData.plugins.length > 0 ? "plugins" : "",
  ].filter(Boolean);
  return Math.round((fields.length / 14) * 100);
};

return (
  <div className="p-6 bg-agentvooc-secondary-bg/95 border border-agentvooc-accent/30 rounded-2xl shadow-agentvooc-glow w-full max-w-5xl mx-auto px-4 sm:px-6 lg:px-8">
    <h3 className="text-2xl font-bold mb-6 text-agentvooc-primary flex items-center">
      <User className="w-6 h-6 mr-2 text-agentvooc-accent" />
      Create New Character
    </h3>

    {/* Form Progress Indicator */}
    <div className="mb-6">
      <div className="flex justify-between items-center mb-2">
        <label className="text-sm font-medium text-agentvooc-secondary">Form Completion</label>
        <span className="text-sm text-agentvooc-accent">{calculateFormProgress()}%</span>
      </div>
      <div className="w-full bg-agentvooc-secondary-accent/20 rounded-full h-2.5">
        <div
          className="bg-gradient-to-r from-blue-500 to-purple-600 h-2.5 rounded-full transition-all duration-500"
          style={{ width: `${calculateFormProgress()}%` }}
        ></div>
      </div>
    </div>

    {/* Preset Selection */}
    <div className="mb-6">
      <div className="flex items-center mb-4">
        <Sliders className="w-4 h-4 text-white mr-2" />
        <span className="text-lg font-semibold text-agentvooc-primary">Select a Preset</span>
      </div>
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3">
        <Button
          variant={selectedPreset === null ? "default" : "outline"}
          onClick={() => handlePresetSelect(null)}
          className={`p-4 rounded-lg border-2 transition-all duration-300 ${
            selectedPreset === null
              ? "bg-agentvooc-button-bg text-agentvooc-accent border-agentvooc-accent shadow-lg"
              : "border-agentvooc-accent/30 text-agentvooc-primary hover:bg-agentvooc-accent/10"
          }`}
        >
          Create Your Own
        </Button>
        {presetsQuery.isLoading ? (
          <p className="text-agentvooc-secondary">Loading presets...</p>
        ) : presetsQuery.isError ? (
          <p className="text-red-500">Error loading presets: {presetsQuery.error.message}</p>
        ) : (
          presetsQuery.data?.map((preset: any) => (
            <Button
              key={preset._id}
              variant={selectedPreset === preset._id ? "default" : "outline"}
              onClick={() => handlePresetSelect(preset)}
              className={`p-4 rounded-lg border-2 transition-all duration-300 ${
                selectedPreset === preset._id
                  ? "bg-agentvooc-button-bg text-agentvooc-accent border-agentvooc-accent shadow-lg"
                  : "border-agentvooc-accent/30 text-agentvooc-primary hover:bg-agentvooc-accent/10"
              }`}
            >
              {preset.name}
            </Button>
          ))
        )}
      </div>
    </div>

    <form onSubmit={handleSubmit} className="space-y-6">
      {/* Basic Information */}
      <Accordion title="Basic Information" defaultOpen={true}>
        <Card title="Character Details" icon={<User className="w-4 h-4 text-white" />}>
          <div className="space-y-4">
            <div className="relative">
              <label
                htmlFor="name"
                className="block text-sm font-medium text-agentvooc-secondary mb-1"
              >
                Character Name (Required)
              </label>
              <div className="relative">
                <User className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-agentvooc-accent" />
                <Input
                  id="name"
                  name="name"
                  type="text"
                  value={characterData.name}
                  onChange={handleInputChange}
                  placeholder="Enter character name (e.g., Eliza)"
                  className="w-full pl-10 pr-4 py-3 text-agentvooc-primary bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-2 focus:ring-agentvooc-accent focus:border-agentvooc-accent placeholder-agentvooc-secondary/50 rounded-xl transition-all duration-300"
                  required
                />
              </div>
            </div>
            <div className="relative">
              <label
                htmlFor="username"
                className="block text-sm font-medium text-agentvooc-secondary mb-1"
              >
                Username
              </label>
              <div className="relative">
                <AtSign className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-agentvooc-accent" />
                <Input
                  id="username"
                  name="username"
                  type="text"
                  value={characterData.username}
                  onChange={handleInputChange}
                  placeholder="Enter username (e.g., eliza)"
                  className="w-full pl-10 pr-4 py-3 text-agentvooc-primary bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-2 focus:ring-agentvooc-accent focus:border-agentvooc-accent placeholder-agentvooc-secondary/50 rounded-xl transition-all duration-300"
                />
              </div>
            </div>
            <div>
              <label
                htmlFor="profileImage"
                className="block text-sm font-medium text-agentvooc-secondary mb-1"
              >
                Profile Image (JPEG, PNG, or GIF)
              </label>
              <div className="relative">
                <Camera className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-agentvooc-accent" />
                <Input
                  id="profileImage"
                  name="profileImage"
                  type="file"
                  accept="image/jpeg,image/png,image/gif"
                  onChange={handleImageChange}
                  className="w-full pl-10 pr-4 py-3 text-agentvooc-primary bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-2 focus:ring-agentvooc-accent focus:border-agentvooc-accent placeholder-agentvooc-secondary/50 rounded-xl transition-all duration-300"
                />
              </div>
              {imagePreview && (
                <div className="mt-4">
                  <img
                    src={imagePreview}
                    alt="Profile preview"
                    className="w-32 h-32 object-cover rounded-lg border border-agentvooc-accent/30 shadow-agentvooc-glow"
                  />
                  <p className="text-sm text-agentvooc-secondary mt-2">Selected: {profileImage?.name}</p>
                </div>
              )}
            </div>
            <div className="relative">
              <label
                htmlFor="system"
                className="block text-sm font-medium text-agentvooc-secondary mb-1"
              >
                System Prompt
              </label>
              <Tooltip content="Define the character's core behavior or role (e.g., 'Act as a Web3 developer').">
                <div className="relative">
                  <MessageCircle className="absolute left-3 top-4 w-5 h-5 text-agentvooc-accent" />
                  <Textarea
                    id="system"
                    name="system"
                    value={characterData.system}
                    onChange={handleInputChange}
                    placeholder="Enter system prompt (e.g., Roleplay as a Web3 developer)"
                    className="w-full pl-10 pr-4 py-3 text-agentvooc-primary bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-2 focus:ring-agentvooc-accent focus:border-agentvooc-accent placeholder-agentvooc-secondary/50 rounded-xl transition-all duration-300 resize-none"
                    style={{
                      minHeight: "120px",
                      maxHeight: "288px",
                      height: `${Math.min(
                        288,
                        Math.max(120, (characterData.system.split("\n").length + 2) * 24)
                      )}px`,
                    }}
                  />
                </div>
              </Tooltip>
              <p className="text-sm text-agentvooc-secondary mt-2">
                Characters: {getCharacterCount(characterData.system)}/500
              </p>
            </div>
          </div>
        </Card>
      </Accordion>

      {/* Personality & Style */}
      <Accordion title="Personality & Style">
        <Card title="Character Personality" icon={<Heart className="w-4 h-4 text-white" />}>
          <div className="space-y-4">
            <div className="relative">
              <label
                htmlFor="bio"
                className="block text-sm font-medium text-agentvooc-secondary mb-1"
              >
                Bio (comma-separated, one per line)
              </label>
              <Tooltip content="Enter short statements describing the character, one per line.">
                <div className="relative">
                  <BookOpen className="absolute left-3 top-4 w-5 h-5 text-agentvooc-accent" />
                  <Textarea
                    id="bio"
                    name="bio"
                    value={bioInput}
                    onChange={(e) => handleArrayInputChange(e, "bio")}
                    placeholder="Enter bio statements, one per line (e.g., Web3 developer,\nSecurity-minded)"
                    className="w-full pl-10 pr-4 py-3 text-agentvooc-primary bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-2 focus:ring-agentvooc-accent focus:border-agentvooc-accent placeholder-agentvooc-secondary/50 rounded-xl transition-all duration-300 resize-none"
                    style={{
                      minHeight: "120px",
                      maxHeight: "288px",
                      height: `${Math.min(
                        288,
                        Math.max(120, (bioInput.split("\n").length + 2) * 24)
                      )}px`,
                    }}
                  />
                </div>
              </Tooltip>
              <p className="text-sm text-agentvooc-secondary mt-2">
                Characters: {getCharacterCount(bioInput)}/1000
              </p>
            </div>
            <div className="relative">
              <label
                htmlFor="lore"
                className="block text-sm font-medium text-agentvooc-secondary mb-1"
              >
                Lore (comma-separated, one per line)
              </label>
              <Tooltip content="Provide backstory snippets for the character, one per line.">
                <div className="relative">
                  <Scroll className="absolute left-3 top-4 w-5 h-5 text-agentvooc-accent" />
                  <Textarea
                    id="lore"
                    name="lore"
                    value={loreInput}
                    onChange={(e) => handleArrayInputChange(e, "lore")}
                    placeholder="Enter lore snippets, one per line (e.g., Started in Web2,\nContributes to Ethereum)"
                    className="w-full pl-10 pr-4 py-3 text-agentvooc-primary bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-2 focus:ring-agentvooc-accent focus:border-agentvooc-accent placeholder-agentvooc-secondary/50 rounded-xl transition-all duration-300 resize-none"
                    style={{
                      minHeight: "120px",
                      maxHeight: "288px",
                      height: `${Math.min(
                        288,
                        Math.max(120, (loreInput.split("\n").length + 2) * 24)
                      )}px`,
                    }}
                  />
                </div>
              </Tooltip>
              <p className="text-sm text-agentvooc-secondary mt-2">
                Characters: {getCharacterCount(loreInput)}/1000
              </p>
            </div>
            <div className="relative">
              <label
                htmlFor="topics"
                className="block text-sm font-medium text-agentvooc-secondary mb-1"
              >
                Topics (comma-separated, one per line)
              </label>
              <Tooltip content="List topics the character is knowledgeable about, one per line.">
                <div className="relative">
                  <Tag className="absolute left-3 top-4 w-5 h-5 text-agentvooc-accent" />
                  <Textarea
                    id="topics"
                    name="topics"
                    value={topicsInput}
                    onChange={(e) => handleArrayInputChange(e, "topics")}
                    placeholder="Enter topics, one per line (e.g., Web3,\nBlockchain)"
                    className="w-full pl-10 pr-4 py-3 text-agentvooc-primary bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-2 focus:ring-agentvooc-accent focus:border-agentvooc-accent placeholder-agentvooc-secondary/50 rounded-xl transition-all duration-300 resize-none"
                    style={{
                      minHeight: "120px",
                      maxHeight: "288px",
                      height: `${Math.min(
                        288,
                        Math.max(120, (topicsInput.split("\n").length + 2) * 24)
                      )}px`,
                    }}
                  />
                </div>
              </Tooltip>
              <p className="text-sm text-agentvooc-secondary mt-2">
                Characters: {getCharacterCount(topicsInput)}/500
              </p>
            </div>
            <div className="relative">
              <label
                htmlFor="adjectives"
                className="block text-sm font-medium text-agentvooc-secondary mb-1"
              >
                Personality (comma-separated, one per line)
              </label>
              <Tooltip content="Describe the character's personality traits, one per line.">
                <div className="relative">
                  <Star className="absolute left-3 top-4 w-5 h-5 text-agentvooc-accent" />
                  <Textarea
                    id="adjectives"
                    name="adjectives"
                    value={adjectivesInput}
                    onChange={(e) => handleArrayInputChange(e, "adjectives")}
                    placeholder="Enter personality traits, one per line (e.g., witty,\ntechnical)"
                    className="w-full pl-10 pr-4 py-3 text-agentvooc-primary bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-2 focus:ring-agentvooc-accent focus:border-agentvooc-accent placeholder-agentvooc-secondary/50 rounded-xl transition-all duration-300 resize-none"
                    style={{
                      minHeight: "120px",
                      maxHeight: "288px",
                      height: `${Math.min(
                        288,
                        Math.max(120, (adjectivesInput.split("\n").length + 2) * 24)
                      )}px`,
                    }}
                  />
                </div>
              </Tooltip>
              <p className="text-sm text-agentvooc-secondary mt-2">
                Characters: {getCharacterCount(adjectivesInput)}/500
              </p>
            </div>
            <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
              <div className="relative">
                <label
                  htmlFor="styleAll"
                  className="block text-sm font-medium text-agentvooc-secondary mb-1"
                >
                  Style: All Contexts
                </label>
                <Tooltip content="Styles applied across all interactions.">
                  <div className="relative">
                    <PenTool className="absolute left-3 top-4 w-5 h-5 text-agentvooc-accent" />
                    <Textarea
                      id="styleAll"
                      name="styleAll"
                      value={styleAllInput}
                      onChange={(e) => handleArrayInputChange(e, "styleAll")}
                      placeholder="Enter styles, one per line (e.g., concise,\nwitty)"
                      className="w-full pl-10 pr-4 py-3 text-agentvooc-primary bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-2 focus:ring-agentvooc-accent focus:border-agentvooc-accent placeholder-agentvooc-secondary/50 rounded-xl transition-all duration-300 resize-none"
                      style={{
                        minHeight: "120px",
                        maxHeight: "288px",
                        height: `${Math.min(
                          288,
                          Math.max(120, (styleAllInput.split("\n").length + 2) * 24)
                        )}px`,
                      }}
                    />
                  </div>
                </Tooltip>
                <p className="text-sm text-agentvooc-secondary mt-2">
                  Characters: {getCharacterCount(styleAllInput)}/500
                </p>
              </div>
              <div className="relative">
                <label
                  htmlFor="styleChat"
                  className="block text-sm font-medium text-agentvooc-secondary mb-1"
                >
                  Style: Chat
                </label>
                <Tooltip content="Styles specific to chat interactions.">
                  <div className="relative">
                    <MessageSquare className="absolute left-3 top-4 w-5 h-5 text-agentvooc-accent" />
                    <Textarea
                      id="styleChat"
                      name="styleChat"
                      value={styleChatInput}
                      onChange={(e) => handleArrayInputChange(e, "styleChat")}
                      placeholder="Enter chat styles, one per line (e.g., playful,\ndynamic)"
                      className="w-full pl-10 pr-4 py-3 text-agentvooc-primary bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-2 focus:ring-agentvooc-accent focus:border-agentvooc-accent placeholder-agentvooc-secondary/50 rounded-xl transition-all duration-300 resize-none"
                      style={{
                        minHeight: "120px",
                        maxHeight: "288px",
                        height: `${Math.min(
                          288,
                          Math.max(120, (styleChatInput.split("\n").length + 2) * 24)
                        )}px`,
                      }}
                    />
                  </div>
                </Tooltip>
                <p className="text-sm text-agentvooc-secondary mt-2">
                  Characters: {getCharacterCount(styleChatInput)}/500
                </p>
              </div>
              <div className="relative">
                <label
                  htmlFor="stylePost"
                  className="block text-sm font-medium text-agentvooc-secondary mb-1"
                >
                  Style: Post
                </label>
                <Tooltip content="Styles specific to social media posts.">
                  <div className="relative">
                    <Send className="absolute left-3 top-4 w-5 h-5 text-agentvooc-accent" />
                    <Textarea
                      id="stylePost"
                      name="stylePost"
                      value={stylePostInput}
                      onChange={(e) => handleArrayInputChange(e, "stylePost")}
                      placeholder="Enter post styles, one per line (e.g., ironic,\nrelevant)"
                      className="w-full pl-10 pr-4 py-3 text-agentvooc-primary bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-2 focus:ring-agentvooc-accent focus:border-agentvooc-accent placeholder-agentvooc-secondary/50 rounded-xl transition-all duration-300 resize-none"
                      style={{
                        minHeight: "120px",
                        maxHeight: "288px",
                        height: `${Math.min(
                          288,
                          Math.max(120, (stylePostInput.split("\n").length + 2) * 24)
                        )}px`,
                      }}
                    />
                  </div>
                </Tooltip>
                <p className="text-sm text-agentvooc-secondary mt-2">
                  Characters: {getCharacterCount(stylePostInput)}/500
                </p>
              </div>
            </div>
          </div>
        </Card>
      </Accordion>

      {/* Examples & Training */}
      <Accordion title="Examples & Training">
        <Card title="Training Data" icon={<Book className="w-4 h-4 text-white" />}>
          <div className="space-y-4">
            <div className="relative">
              <label
                htmlFor="messageExamples"
                className="block text-sm font-medium text-agentvooc-secondary mb-1"
              >
                Message Examples (JSON format)
              </label>
              <Tooltip content="Enter an array of conversation arrays in JSON format. Each message needs 'user' and 'content' with a 'text' property.">
                <div className="relative">
                  <Code className="absolute left-3 top-4 w-5 h-5 text-agentvooc-accent" />
                  <Textarea
                    id="messageExamples"
                    name="messageExamples"
                    value={messageExamplesInput}
                    onChange={(e) => handleArrayInputChange(e, "messageExamples")}
                    placeholder={`Example format:\n[\n  [\n    {"user": "{{user1}}", "content": {"text": "Question"}},\n    {"user": "CharacterName", "content": {"text": "Answer"}}\n  ],\n  [...]\n]`}
                    className="w-full pl-10 pr-4 py-3 text-agentvooc-primary bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-2 focus:ring-agentvooc-accent focus:border-agentvooc-accent placeholder-agentvooc-secondary/50 rounded-xl transition-all duration-300 font-mono resize-none"
                    style={{
                      minHeight: "120px",
                      maxHeight: "288px",
                      height: `${Math.min(
                        288,
                        Math.max(120, (messageExamplesInput.split("\n").length + 2) * 24)
                      )}px`,
                    }}
                  />
                </div>
              </Tooltip>
              {messageExamplesError && (
                <div className="mt-2 p-3 bg-red-500/10 border border-red-500/30 rounded-lg text-red-400 flex items-center">
                  <AlertCircle className="w-4 h-4 mr-2" />
                  {messageExamplesError}
                </div>
              )}
              <p className="text-sm text-agentvooc-secondary mt-2">
                Characters: {getCharacterCount(messageExamplesInput)}/5000
              </p>
            </div>
            <div className="relative">
              <label
                htmlFor="postExamples"
                className="block text-sm font-medium text-agentvooc-secondary mb-1"
              >
                Post Examples (comma-separated, one per line)
              </label>
              <Tooltip content="Provide example social media posts, one per line.">
                <div className="relative">
                  <Send className="absolute left-3 top-4 w-5 h-5 text-agentvooc-accent" />
                  <Textarea
                    id="postExamples"
                    name="postExamples"
                    value={postExamplesInput}
                    onChange={(e) => handleArrayInputChange(e, "postExamples")}
                    placeholder="Enter post examples, one per line (e.g., Debugged for 3 hours,\nGas fees are forever)"
                    className="w-full pl-10 pr-4 py-3 text-agentvooc-primary bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-2 focus:ring-agentvooc-accent focus:border-agentvooc-accent placeholder-agentvooc-secondary/50 rounded-xl transition-all duration-300 resize-none"
                    style={{
                      minHeight: "120px",
                      maxHeight: "288px",
                      height: `${Math.min(
                        288,
                        Math.max(120, (postExamplesInput.split("\n").length + 2) * 24)
                      )}px`,
                    }}
                  />
                </div>
              </Tooltip>
              <p className="text-sm text-agentvooc-secondary mt-2">
                Characters: {getCharacterCount(postExamplesInput)}/1000
              </p>
            </div>
          </div>
        </Card>
      </Accordion>

      {/* Plugins & Integrations */}
      <Accordion title="Plugins & Integrations">
        <Card title="Integrations" icon={<Plug className="w-4 h-4 text-white" />}>
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <label
                htmlFor="enableEmailPlugin"
                className="text-sm font-medium text-agentvooc-secondary"
              >
                Enable Email Plugin
              </label>
              <input
                id="enableEmailPlugin"
                name="enableEmailPlugin"
                type="checkbox"
                checked={characterData.plugins.includes("email")}
                onChange={(e) => handleEmailCheckbox(e.target.checked)}
                className="w-6 h-6 text-agentvooc-accent focus:ring-agentvooc-accent rounded transition-all duration-300"
              />
            </div>
            {(characterData.plugins.includes("email") || characterData.plugins.includes("emailautomation")) && (
              <>
                <div className="ml-4 space-y-4">
                  <h4 className="text-sm font-medium text-agentvooc-secondary">Outgoing Email Settings</h4>
                  <div className="relative">
                    <label
                      htmlFor="emailOutgoingService"
                      className="block text-sm font-medium text-agentvooc-secondary mb-1"
                    >
                      Service
                    </label>
                    <div className="relative">
                      <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-agentvooc-accent" />
                      <select
                        id="emailOutgoingService"
                        name="emailOutgoingService"
                        value={characterData.settings.email.outgoing.service}
                        onChange={(e) => handleAdvancedInputChange(e, "settings", "email.outgoing.service")}
                        className="w-full pl-10 pr-4 py-3 text-agentvooc-primary bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-2 focus:ring-agentvooc-accent focus:border-agentvooc-accent rounded-xl transition-all duration-300"
                      >
                        <option value="gmail">Gmail</option>
                        <option value="smtp">SMTP</option>
                      </select>
                    </div>
                  </div>
                  {characterData.settings.email.outgoing.service === "smtp" && (
                    <>
                      <div className="relative">
                        <label
                          htmlFor="emailOutgoingHost"
                          className="block text-sm font-medium text-agentvooc-secondary mb-1"
                        >
                          Host
                        </label>
                        <div className="relative">
                          <Server className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-agentvooc-accent" />
                          <Input
                            id="emailOutgoingHost"
                            name="emailOutgoingHost"
                            type="text"
                            value={characterData.settings.email.outgoing.host}
                            onChange={(e) => handleAdvancedInputChange(e, "settings", "email.outgoing.host")}
                            placeholder="e.g., smtp.example.com"
                            className="w-full pl-10 pr-4 py-3 text-agentvooc-primary bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-2 focus:ring-agentvooc-accent focus:border-agentvooc-accent placeholder-agentvooc-secondary/50 rounded-xl transition-all duration-300"
                          />
                        </div>
                      </div>
                      <div className="relative">
                        <label
                          htmlFor="emailOutgoingPort"
                          className="block text-sm font-medium text-agentvooc-secondary mb-1"
                        >
                          Port
                        </label>
                        <div className="relative">
                          <Hash className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-agentvooc-accent" />
                          <Input
                            id="emailOutgoingPort"
                            name="emailOutgoingPort"
                            type="number"
                            value={characterData.settings.email.outgoing.port}
                            onChange={(e) => handleAdvancedInputChange(e, "settings", "email.outgoing.port")}
                            placeholder="e.g., 587"
                            className="w-full pl-10 pr-4 py-3 text-agentvooc-primary bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-2 focus:ring-agentvooc-accent focus:border-agentvooc-accent placeholder-agentvooc-secondary/50 rounded-xl transition-all duration-300"
                          />
                        </div>
                      </div>
                      <div className="relative">
                        <label
                          htmlFor="emailOutgoingSecure"
                          className="block text-sm font-medium text-agentvooc-secondary mb-1"
                        >
                          Secure (TLS)
                        </label>
                        <div className="relative">
                          <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-agentvooc-accent" />
                          <select
                            id="emailOutgoingSecure"
                            name="emailOutgoingSecure"
                            value={characterData.settings.email.outgoing.secure.toString()}
                            onChange={(e) => handleAdvancedInputChange(e, "settings", "email.outgoing.secure")}
                            className="w-full pl-10 pr-4 py-3 text-agentvooc-primary bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-2 focus:ring-agentvooc-accent focus:border-agentvooc-accent rounded-xl transition-all duration-300"
                          >
                            <option value="true">Yes</option>
                            <option value="false">No</option>
                          </select>
                        </div>
                      </div>
                    </>
                  )}
                  <div className="relative">
                    <label
                      htmlFor="emailOutgoingUser"
                      className="block text-sm font-medium text-agentvooc-secondary mb-1"
                    >
                      Username
                    </label>
                    <div className="relative">
                      <User className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-agentvooc-accent" />
                      <Input
                        id="emailOutgoingUser"
                        name="emailOutgoingUser"
                        type="text"
                        value={emailOutgoingUser}
                        onChange={handleEmailOutgoingUserChange}
                        placeholder="e.g., your-email@gmail.com"
                        className="w-full pl-10 pr-4 py-3 text-agentvooc-primary bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-2 focus:ring-agentvooc-accent focus:border-agentvooc-accent placeholder-agentvooc-secondary/50 rounded-xl transition-all duration-300"
                      />
                    </div>
                  </div>
                  <div className="relative">
                    <label
                      htmlFor="emailOutgoingPass"
                      className="block text-sm font-medium text-agentvooc-secondary mb-1"
                    >
                      Password
                    </label>
                    <div className="relative">
                      <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-agentvooc-accent" />
                      <Input
                        id="emailOutgoingPass"
                        name="emailOutgoingPass"
                        type="password"
                        value={emailOutgoingPass}
                        onChange={handleEmailOutgoingPassChange}
                        placeholder="e.g., your-app-password"
                        className="w-full pl-10 pr-4 py-3 text-agentvooc-primary bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-2 focus:ring-agentvooc-accent focus:border-agentvooc-accent placeholder-agentvooc-secondary/50 rounded-xl transition-all duration-300"
                      />
                    </div>
                    {characterData.settings.email.outgoing.service === "gmail" && (
                      <p className="text-sm text-agentvooc-secondary mt-2">
                        Use a Gmail App Password (
                        <a
                          href="https://support.google.com/mail/answer/185833?hl=en"
                          target="_blank"
                          rel="noopener noreferrer"
                          className="text-agentvooc-accent hover:underline"
                        >
                          learn more
                        </a>
                        ).
                      </p>
                    )}
                  </div>
                </div>
                <div className="ml-4 space-y-4">
                  <h4 className="text-sm font-medium text-agentvooc-secondary">Incoming Email Settings</h4>
                  <div className="relative">
                    <label
                      htmlFor="emailIncomingHost"
                      className="block text-sm font-medium text-agentvooc-secondary mb-1"
                    >
                      Host
                    </label>
                    <div className="relative">
                      <Server className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-agentvooc-accent" />
                      <Input
                        id="emailIncomingHost"
                        name="emailIncomingHost"
                        type="text"
                        value={characterData.settings.email.incoming.host}
                        onChange={(e) => handleAdvancedInputChange(e, "settings", "email.incoming.host")}
                        placeholder="e.g., imap.gmail.com"
                        className="w-full pl-10 pr-4 py-3 text-agentvooc-primary bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-2 focus:ring-agentvooc-accent focus:border-agentvooc-accent placeholder-agentvooc-secondary/50 rounded-xl transition-all duration-300"
                      />
                    </div>
                  </div>
                  <div className="relative">
                    <label
                      htmlFor="emailIncomingPort"
                      className="block text-sm font-medium text-agentvooc-secondary mb-1"
                    >
                      Port
                    </label>
                    <div className="relative">
                      <Hash className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-agentvooc-accent" />
                      <Input
                        id="emailIncomingPort"
                        name="emailIncomingPort"
                        type="number"
                        value={characterData.settings.email.incoming.port}
                        onChange={(e) => handleAdvancedInputChange(e, "settings", "email.incoming.port")}
                        placeholder="e.g., 993"
                        className="w-full pl-10 pr-4 py-3 text-agentvooc-primary bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-2 focus:ring-agentvooc-accent focus:border-agentvooc-accent placeholder-agentvooc-secondary/50 rounded-xl transition-all duration-300"
                      />
                    </div>
                  </div>
                  <div className="relative">
                    <label
                      htmlFor="emailIncomingUser"
                      className="block text-sm font-medium text-agentvooc-secondary mb-1"
                    >
                      Username
                    </label>
                    <div className="relative">
                      <User className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-agentvooc-accent" />
                      <Input
                        id="emailIncomingUser"
                        name="emailIncomingUser"
                        type="text"
                        value={emailIncomingUser}
                        onChange={handleEmailIncomingUserChange}
                        placeholder="e.g., your-email@gmail.com"
                        className="w-full pl-10 pr-4 py-3 text-agentvooc-primary bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-2 focus:ring-agentvooc-accent focus:border-agentvooc-accent placeholder-agentvooc-secondary/50 rounded-xl transition-all duration-300"
                      />
                    </div>
                  </div>
                  <div className="relative">
                    <label
                      htmlFor="emailIncomingPass"
                      className="block text-sm font-medium text-agentvooc-secondary mb-1"
                    >
                      Password
                    </label>
                    <div className="relative">
                      <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-agentvooc-accent" />
                      <Input
                        id="emailIncomingPass"
                        name="emailIncomingPass"
                        type="password"
                        value={emailIncomingPass}
                        onChange={handleEmailIncomingPassChange}
                        placeholder="e.g., your-app-password"
                        className="w-full pl-10 pr-4 py-3 text-agentvooc-primary bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-2 focus:ring-agentvooc-accent focus:border-agentvooc-accent placeholder-agentvooc-secondary/50 rounded-xl transition-all duration-300"
                      />
                    </div>
                  </div>
                </div>
              </>
            )}
            <div className="flex items-center justify-between">
              <label
                htmlFor="enableTelegramPlugin"
                className="text-sm font-medium text-agentvooc-secondary"
              >
                Enable Telegram Plugin
              </label>
              <input
                id="enableTelegramPlugin"
                name="enableTelegramPlugin"
                type="checkbox"
                checked={characterData.plugins.includes("telegram")}
                onChange={(e) => handleTelegramCheckbox(e.target.checked)}
                className="w-6 h-6 text-agentvooc-accent focus:ring-agentvooc-accent rounded transition-all duration-300"
              />
            </div>
            {characterData.plugins.includes("telegram") && (
              <div className="ml-4 space-y-4">
                <div className="relative">
                  <label
                    htmlFor="telegramBotToken"
                    className="block text-sm font-medium text-agentvooc-secondary mb-1"
                  >
                    Telegram Bot Token
                  </label>
                  <Tooltip content="Obtain a bot token from BotFather on Telegram.">
                    <div className="relative">
                      <Send className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-agentvooc-accent" />
                      <Input
                        id="telegramBotToken"
                        name="telegramBotToken"
                        type="text"
                        value={telegramBotToken}
                        onChange={handleTelegramBotTokenChange}
                        placeholder="e.g., 123456789:ABC-DEF1234ghIkl-zyx57W2v1u123ew11"
                        className="w-full pl-10 pr-4 py-3 text-agentvooc-primary bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-2 focus:ring-agentvooc-accent focus:border-agentvooc-accent placeholder-agentvooc-secondary/50 rounded-xl transition-all duration-300"
                      />
                    </div>
                  </Tooltip>
                </div>
              </div>
            )}
            <div className="flex items-center justify-between">
              <label
                htmlFor="enableTwitterPlugin"
                className="text-sm font-medium text-agentvooc-secondary"
              >
                Enable Twitter Plugin
              </label>
              <input
                id="enableTwitterPlugin"
                name="enableTwitterPlugin"
                type="checkbox"
                checked={characterData.plugins.includes("twitter")}
                onChange={(e) => handleTwitterCheckbox(e.target.checked)}
                className="w-6 h-6 text-agentvooc-accent focus:ring-agentvooc-accent rounded transition-all duration-300"
              />
            </div>
            {characterData.plugins.includes("twitter") && (
              <div className="ml-4 space-y-4">
                <div className="relative">
                  <label
                    htmlFor="twitterUsername"
                    className="block text-sm font-medium text-agentvooc-secondary mb-1"
                  >
                    Twitter Username
                  </label>
                  <div className="relative">
                    <AtSign className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-agentvooc-accent" />
                    <Input
                      id="twitterUsername"
                      name="twitterUsername"
                      type="text"
                      value={twitterUsername}
                      onChange={handleTwitterUsernameChange}
                      placeholder="e.g., @username"
                      className="w-full pl-10 pr-4 py-3 text-agentvooc-primary bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-2 focus:ring-agentvooc-accent focus:border-agentvooc-accent placeholder-agentvooc-secondary/50 rounded-xl transition-all duration-300"
                    />
                  </div>
                </div>
                <div className="relative">
                  <label
                    htmlFor="twitterPassword"
                    className="block text-sm font-medium text-agentvooc-secondary mb-1"
                  >
                    Twitter Password
                  </label>
                  <div className="relative">
                    <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-agentvooc-accent" />
                    <Input
                      id="twitterPassword"
                      name="twitterPassword"
                      type="password"
                      value={twitterPassword}
                      onChange={handleTwitterPasswordChange}
                      placeholder="Enter your Twitter password"
                      className="w-full pl-10 pr-4 py-3 text-agentvooc-primary bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-2 focus:ring-agentvooc-accent focus:border-agentvooc-accent placeholder-agentvooc-secondary/50 rounded-xl transition-all duration-300"
                    />
                  </div>
                </div>
                <div className="relative">
                  <label
                    htmlFor="twitterEmail"
                    className="block text-sm font-medium text-agentvooc-secondary mb-1"
                  >
                    Twitter Email
                  </label>
                  <div className="relative">
                    <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-agentvooc-accent" />
                    <Input
                      id="twitterEmail"
                      name="twitterEmail"
                      type="email"
                      value={twitterEmail}
                      onChange={handleTwitterEmailChange}
                      placeholder="e.g., user@example.com"
                      className="w-full pl-10 pr-4 py-3 text-agentvooc-primary bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-2 focus:ring-agentvooc-accent focus:border-agentvooc-accent placeholder-agentvooc-secondary/50 rounded-xl transition-all duration-300"
                    />
                  </div>
                </div>
              </div>
            )}
            <div className="relative">
              <label
                htmlFor="plugins"
                className="block text-sm font-medium text-agentvooc-secondary mb-1"
              >
                Other Plugins (comma-separated)
              </label>
              <Tooltip content="Enter additional plugin names, separated by commas.">
                <div className="relative">
                  <Plug className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-agentvooc-accent" />
                  <Input
                    id="plugins"
                    name="plugins"
                    type="text"
                    value={characterData.plugins
                      .filter((p) => !["email", "emailautomation", "telegram", "twitter"].includes(p))
                      .join(",")}
                    onChange={(e) => {
                      const newPlugins = e.target.value
                        .split(",")
                        .map((s) => s.trim())
                        .filter((s) => s);
                      const activePlugins = userQuery.data?.activePlugins || [];
                      const invalidPlugins = newPlugins.filter((p) => !activePlugins.includes(p));
                      if (invalidPlugins.length > 0) {
                        toast({
                          variant: "destructive",
                          title: "Subscription Required",
                          description: `You need a subscription for the following plugins: ${invalidPlugins.join(", ")}. Please subscribe in the settings page.`,
                          action: (
                            <Button
                              onClick={() => navigate("/settings", { state: { from: "create-character" } })}
                              className="bg-agentvooc-button-bg text-agentvooc-accent hover:bg-agentvooc-accent hover:text-agentvooc-secondary-bg"
                            >
                              Go to Settings
                            </Button>
                          ),
                        });
                        return;
                      }
                      setCharacterData((prev) => ({
                        ...prev,
                        plugins: [
                          ...prev.plugins.filter((p) =>
                            ["email", "emailautomation", "telegram", "twitter"].includes(p)
                          ),
                          ...newPlugins,
                        ],
                      }));
                    }}
                    placeholder="Enter plugins (e.g., solana)"
                    className="w-full pl-10 pr-4 py-3 text-agentvooc-primary bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-2 focus:ring-agentvooc-accent focus:border-agentvooc-accent placeholder-agentvooc-secondary/50 rounded-xl transition-all duration-300"
                  />
                </div>
              </Tooltip>
            </div>
          </div>
        </Card>
      </Accordion>

      {/* Advanced Settings */}
      <Accordion title="Advanced Settings">
        <Card
          title="Advanced Configuration"
          icon={<Settings className="w-4 h-4 text-white" />}
          className="bg-gradient-to-br from-agentvooc-secondary-accent/20 to-agentvooc-secondary-bg"
        >
          <div className="space-y-4">
            <div className="relative">
              <label
                htmlFor="modelProvider"
                className="block text-sm font-medium text-agentvooc-secondary mb-1"
              >
                Model Provider
              </label>
              <Tooltip content="Select the AI model provider for this character.">
                <div className="relative">
                  <Cpu className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-agentvooc-accent" />
                  <select
                    id="modelProvider"
                    name="modelProvider"
                    value={characterData.modelProvider}
                    onChange={handleInputChange}
                    className="w-full pl-10 pr-4 py-3 text-agentvooc-primary bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-2 focus:ring-agentvooc-accent focus:border-agentvooc-accent rounded-xl transition-all duration-300"
                  >
                    <option value="OPENAI">OpenAI</option>
                    <option value="OLLAMA">Ollama</option>
                    <option value="CUSTOM">Custom</option>
                  </select>
                </div>
              </Tooltip>
            </div>
            <div className="relative">
              <label
                htmlFor="voiceModel"
                className="block text-sm font-medium text-agentvooc-secondary mb-1"
              >
                Voice Model
              </label>
              <Tooltip content="Specify a voice model for text-to-speech (if applicable).">
                <div className="relative">
                  <Mic className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-agentvooc-accent" />
                  <Input
                    id="voiceModel"
                    name="voiceModel"
                    type="text"
                    value={characterData.settings.voice.model}
                    onChange={(e) => handleAdvancedInputChange(e, "settings", "voiceModel")}
                    placeholder="Enter voice model (e.g., en_US-hfc_female-medium)"
                    className="w-full pl-10 pr-4 py-3 text-agentvooc-primary bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-2 focus:ring-agentvooc-accent focus:border-agentvooc-accent placeholder-agentvooc-secondary/50 rounded-xl transition-all duration-300"
                  />
                </div>
              </Tooltip>
            </div>
            <div className="relative">
              <label
                htmlFor="ragKnowledge"
                className="block text-sm font-medium text-agentvooc-secondary mb-1"
              >
                Enable RAG Knowledge
              </label>
              <Tooltip content="Enable Retrieval-Augmented Generation for enhanced knowledge access.">
                <div className="relative">
                  <Database className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-agentvooc-accent" />
                  <select
                    id="ragKnowledge"
                    name="ragKnowledge"
                    value={characterData.settings.ragKnowledge.toString()}
                    onChange={(e) => handleAdvancedInputChange(e, "settings", "ragKnowledge")}
                    className="w-full pl-10 pr-4 py-3 text-agentvooc-primary bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-2 focus:ring-agentvooc-accent focus:border-agentvooc-accent rounded-xl transition-all duration-300"
                  >
                    <option value="true">Yes</option>
                    <option value="false">No</option>
                  </select>
                </div>
              </Tooltip>
            </div>
            <div>
              <label className="block text-sm font-medium text-agentvooc-secondary mb-2">
                Secrets
              </label>
              {secretsError && (
                <div className="mb-2 p-3 bg-red-500/10 border border-red-500/30 rounded-lg text-red-400 flex items-center">
                  <AlertCircle className="w-4 h-4 mr-2" />
                  {secretsError}
                </div>
              )}
              {secrets.map((secret, index) => (
                <div key={index} className="flex items-center space-x-2 mb-2">
                  <div className="relative flex-1">
                    <Key className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-agentvooc-accent" />
                    <Input
                      type="text"
                      placeholder="Key (e.g., API_KEY)"
                      value={secret.key}
                      onChange={(e) => handleSecretChange(index, "key", e.target.value)}
                      className="w-full pl-10 pr-4 py-3 text-agentvooc-primary bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-2 focus:ring-agentvooc-accent focus:border-agentvooc-accent placeholder-agentvooc-secondary/50 rounded-xl transition-all duration-300"
                      disabled={secret.key === "TELEGRAM_BOT_TOKEN"}
                    />
                  </div>
                  <div className="relative flex-1">
                    <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-agentvooc-accent" />
                    <Input
                      type="text"
                      placeholder="Value (e.g., your-api-key)"
                      value={secret.value}
                      onChange={(e) => handleSecretChange(index, "value", e.target.value)}
                      className="w-full pl-10 pr-4 py-3 text-agentvooc-primary bg-agentvooc-secondary-accent/50 border border-agentvooc-accent/30 focus:ring-2 focus:ring-agentvooc-accent focus:border-agentvooc-accent placeholder-agentvooc-secondary/50 rounded-xl transition-all duration-300"
                      disabled={secret.key === "TELEGRAM_BOT_TOKEN"}
                    />
                  </div>
                  <Button
                    type="button"
                    variant="destructive"
                    onClick={() => removeSecret(index)}
                    disabled={secrets.length === 1 || secret.key === "TELEGRAM_BOT_TOKEN"}
                    className="bg-red-500 text-white hover:bg-red-600 rounded-xl px-4 py-2"
                  >
                    <Trash2 className="w-4 h-4" />
                  </Button>
                </div>
              ))}
              <Button
                type="button"
                onClick={addSecret}
                className="mt-2 bg-agentvooc-button-bg text-agentvooc-accent hover:bg-agentvooc-accent hover:text-agentvooc-secondary-bg shadow-agentvooc-glow rounded-xl px-4 py-2"
              >
                <Plus className="w-4 h-4 mr-2" />
                Add Secret
              </Button>
            </div>
          </div>
        </Card>
      </Accordion>

      {/* Character Preview Card */}
      <Card title="Character Preview" icon={<Eye className="w-4 h-4 text-white" />}>
        <div className="flex items-start space-x-4">
          {imagePreview ? (
            <img
              src={imagePreview}
              alt="Character preview"
              className="w-24 h-24 object-cover rounded-lg border border-agentvooc-accent/30"
            />
          ) : (
            <div className="w-24 h-24 bg-agentvooc-secondary-accent/20 rounded-lg flex items-center justify-center">
              <User className="w-12 h-12 text-agentvooc-accent/50" />
            </div>
          )}
          <div>
            <h4 className="text-lg font-semibold text-agentvooc-primary">
              {characterData.name || "Unnamed Character"}
            </h4>
            <p className="text-sm text-agentvooc-secondary">
              @{characterData.username || "username"}
            </p>
            <p className="text-sm text-agentvooc-secondary mt-2">
              {bioInput.split(/,\s*\n/)[0] || "No bio provided"}
            </p>
          </div>
        </div>
      </Card>

      {/* Form Actions */}
      <div className="flex gap-4 justify-end">
        <Button
          type="submit"
          className="bg-agentvooc-button-bg text-agentvooc-accent hover:bg-agentvooc-accent hover:text-agentvooc-secondary-bg shadow-agentvooc-glow rounded-xl px-6 py-3 transition-all duration-300"
          disabled={createCharacterMutation.isPending || uploadImageMutation.isPending}
        >
          {createCharacterMutation.isPending || uploadImageMutation.isPending ? (
            <>
              <Loader2 className="text-agentvooc-primary mr-2 h-4 w-4 animate-spin" />
              Creating...
            </>
          ) : (
            <>
              <Check className="w-4 h-4 mr-2" />
              Create Character
            </>
          )}
        </Button>
        <Button
          type="button"
          variant="outline"
          onClick={handleCancel}
          className="border-agentvooc-accent/30 text-agentvooc-primary hover:bg-agentvooc-accent/10 hover:text-agentvooc-secondary-bg rounded-xl px-6 py-3 transition-all duration-300"
        >
          <X className="w-4 h-4 mr-2" />
          Cancel
        </Button>
      </div>
    </form>
  </div>
);
}